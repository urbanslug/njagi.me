<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
	<title>Mostly Programming - Posts</title>
	<subtitle>Programming, Bioinformatics, Data, Books, and More</subtitle>
	<link href="https://njagi.me/categories/posts/atom.xml" rel="self" type="application/atom+xml"/>
  <link href="https://njagi.me"/>
	<generator uri="https://www.getzola.org/">Zola</generator>
	<updated>2019-08-20T00:00:00+00:00</updated>
	<id>https://njagi.me/categories/posts/atom.xml</id>
	<entry xml:lang="en">
		<title>Google Summer of Code 2019—Final Submission</title>
		<published>2019-08-20T00:00:00+00:00</published>
		<updated>2019-08-20T00:00:00+00:00</updated>
		<link href="https://njagi.me/posts/google-summer-of-code-2019-final-submission/" type="text/html"/>
		<id>https://njagi.me/posts/google-summer-of-code-2019-final-submission/</id>
		<content type="html">&lt;p&gt;The Google Summer of Code for 2019 is coming to a close. I&#x27;ve been working on
the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;urbanslug&#x2F;graphite&quot;&gt;Graphite&lt;&#x2F;a&gt; project aimed at creating a variation graph tool under the
&lt;a href=&quot;https:&#x2F;&#x2F;www.open-bio.org&quot;&gt;Open Bioinformatics Foundation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h1 id=&quot;genome-graphs&quot;&gt;Genome Graphs&lt;&#x2F;h1&gt;
&lt;p&gt;I shall give an overview of genome graphs; for a more thorough introduction, I
advise reading  &lt;a href=&quot;https:&#x2F;&#x2F;lh3.github.io&#x2F;2019&#x2F;07&#x2F;08&#x2F;on-a-reference-pan-genome-model&quot;&gt;On a reference pan-genome model&lt;&#x2F;a&gt; or my very own
&lt;a href=&quot;https:&#x2F;&#x2F;njagi.me&#x2F;posts&#x2F;google-summer-of-code-2019-final-submission&#x2F;2019-06-22-Introduction-to-Variation-Graphs.html&quot;&gt;An Introduction to Variation Graphs&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;ekg.github.io&#x2F;2019&#x2F;07&#x2F;09&#x2F;Untangling-graphical-pangenomics&quot;&gt;Variation graphs&lt;&#x2F;a&gt; are a class of &lt;a href=&quot;https:&#x2F;&#x2F;www.biorxiv.org&#x2F;content&#x2F;10.1101&#x2F;101378v1&quot;&gt;genome graphs&lt;&#x2F;a&gt; that, among other things,
maintain:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;path information—a full walk within the graph along the edges&lt;&#x2F;li&gt;
&lt;li&gt;a strong mapping between nodes on the graph and their positions on the
reference&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;All this with the main aim of representing genomic variation.&lt;&#x2F;p&gt;
&lt;p&gt;Currently genomes are represented as a consensus; for example, here&#x27;s part of
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vgteam&#x2F;vg&#x2F;blob&#x2F;master&#x2F;test&#x2F;1mb1kgp&#x2F;z.fa&quot;&gt;chromosome 20 of the human genome&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;TGGGAGAGAACTGGAACAAGAACCCAGTGCTCTTTCTGCTCTACCCACTGACCCATCCTCTCACGCATCATACACCCATA
&lt;&#x2F;span&gt;&lt;span&gt;CTCCCATCCACCCACCTTCCCATTCATGCATTCACCCATTCACCCACCTTCCATCCATCTACCATCCACCACGTACCTAC
&lt;&#x2F;span&gt;&lt;span&gt;ACTCCCATCTACCATCCAACCACATTTCCATTCACCCATCCTCCCATCCATCAACCCTCCAATCCACCACCCACAGACCT
&lt;&#x2F;span&gt;&lt;span&gt;TCCCATCCATTCATTTACCCATCCACATATTCACCCACCCTCCCATCCATCCATCTACTGTCTATCACCTACTCATTTTC
&lt;&#x2F;span&gt;&lt;span&gt;...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;However, variation &lt;strong&gt;does&lt;&#x2F;strong&gt; exist on this chromosome between individuals.
To demonstrate, when &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vgteam&#x2F;vg&#x2F;blob&#x2F;master&#x2F;test&#x2F;1mb1kgp&#x2F;z.vcf.gz&quot;&gt;a single file of variation data&lt;&#x2F;a&gt; is &amp;quot;applied&amp;quot; to it we end
up with a graph that can be represented as in the  below zoomed in section of
chromosome 20.
&lt;img src=&quot;&#x2F;images&#x2F;Content&#x2F;Graphs&#x2F;chr20.png&quot; alt=&quot;chr20&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Not all graphs are linear like the one above; in fact, the kind of graphs we&#x27;re
hoping to generate soon will have many breaks and will look pretty jumbled up.
The amount of variation within and between genomes depends on a lot of factors
including but not limited to the organism(s) whose genomes are studying and how
evolutionarily distant the genomes we are comparing are (pan-genomes).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reference-bias&quot;&gt;Reference Bias&lt;&#x2F;h2&gt;
&lt;p&gt;The reference being a consensus introduces a problem known as &lt;a href=&quot;https:&#x2F;&#x2F;www.sevenbridges.com&#x2F;reference-bias-challenges-and-solutions&#x2F;&quot;&gt;reference bias&lt;&#x2F;a&gt;;
which is analogous to a false negative during read mapping, that is, claiming
that a variation does not exist where it actually exists.
&lt;a href=&quot;https:&#x2F;&#x2F;www.nature.com&#x2F;articles&#x2F;nbt.4227&quot;&gt;Research&lt;&#x2F;a&gt; has shown an improvement in read mapping of short read data when
short reads are mapped to a reference graph instead of a reference consensus.&lt;&#x2F;p&gt;
&lt;p&gt;Currently, graphite shows that we can generate a graph from a reference and
variation data and progressively update it; not far from what Heng Li theorizes
in: &lt;a href=&quot;https:&#x2F;&#x2F;lh3.github.io&#x2F;2019&#x2F;07&#x2F;08&#x2F;on-a-reference-pan-genome-model&quot;&gt;On a reference pan-genome model&lt;&#x2F;a&gt;.
We plan on supporting the generation of graphs from short and long-read data on
its own (de novo), you can track its progress under
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;urbanslug&#x2F;graphite&#x2F;projects&#x2F;1&quot;&gt;the alignment project board&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;why-racket&quot;&gt;Why Racket?&lt;&#x2F;h1&gt;
&lt;p&gt;You may wonder why Graphite is written in Racket yet the project name is
&lt;a href=&quot;https:&#x2F;&#x2F;summerofcode.withgoogle.com&#x2F;projects&#x2F;#4733198808907776&quot;&gt;Add Variant Graph (VG) support to BioD&lt;&#x2F;a&gt;.
Genome graphs have been theorized and written about for a while now but there
are only a few tools that implement them and there has been even much less use
by bioinformaticians.&lt;&#x2F;p&gt;
&lt;p&gt;We decided to build something people can use over just adding variation graph
support to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;biod&#x2F;biod&quot;&gt;BioD&lt;&#x2F;a&gt; believing that it would&#x27;ve taken me longer to write something
people could use in D.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-racket-not-another-language-or-lisp&quot;&gt;Why Racket Not Another Language or Lisp?&lt;&#x2F;h2&gt;
&lt;p&gt;I have experience in functional programming and particularly
professional experience with LISPs, I could, therefore, move much faster in it.
Racket is a good LISP to use when working in an unfamiliar domain because it has
a &lt;strong&gt;straightforward build system&lt;&#x2F;strong&gt; compared to the overhead of the JVM and
leiningen in the most popular LISP, Clojure does and has an
&lt;strong&gt;easy to use C&#x2F;C++ FFI&lt;&#x2F;strong&gt;, languages used in a lot of Bioinformatics
applications and libraries. Being &lt;strong&gt;untyped&lt;&#x2F;strong&gt; and programming in LISP being
&lt;strong&gt;REPL driven&lt;&#x2F;strong&gt; also helps to venture into unfamiliar territory.
Racket has &lt;strong&gt;immutability&lt;&#x2F;strong&gt; in a lot, if not all, of its data structures which
also helps with all the data manipulation we would have to do. Finally, Racket
also &lt;strong&gt;implements core programming concepts elegantly&lt;&#x2F;strong&gt; compared to many other
languages for example with its hygienic macros.&lt;&#x2F;p&gt;
&lt;p&gt;This shouldn&#x27;t make the D community feel betrayed because given what
we know now, we can always go back and reimplement either all or part of
Graphite in D, especially for the possible performance improvements.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;done&quot;&gt;Done&lt;&#x2F;h1&gt;
&lt;p&gt;For the fine detail install and set up Graphite as instructed in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;urbanslug&#x2F;graphite#graphite&quot;&gt;README&lt;&#x2F;a&gt;
and run &lt;code&gt;graphite --help&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;underlying-graph-representation&quot;&gt;Underlying Graph Representation&lt;&#x2F;h2&gt;
&lt;p&gt;We implemented the graph as an association hash table. I went into more detail
on how it&#x27;s built and the rationale behind certain choices in
&lt;a href=&quot;https:&#x2F;&#x2F;njagi.me&#x2F;posts&#x2F;google-summer-of-code-2019-final-submission&#x2F;2019-07-15-Creating-the-Initial-Variation-Graph.html&quot;&gt;Creating the Initial Variation Graph&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;njagi.me&#x2F;posts&#x2F;google-summer-of-code-2019-final-submission&#x2F;2019-07-21-Justifying-SHA256-in-Graphite.html&quot;&gt;Justifying SHA256 in Graphite&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;construct&quot;&gt;Construct&lt;&#x2F;h2&gt;
&lt;p&gt;Graphite allows you to build an initial graph out of a reference in
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;FASTA_format&quot;&gt;FASTA format&lt;&#x2F;a&gt; and a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Variant_Call_Format&quot;&gt;VCF&lt;&#x2F;a&gt; file.
In the example below I output a serialized graph but you can output &lt;code&gt;.dot&lt;&#x2F;code&gt; or
&lt;code&gt;.gfa&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;.&#x2F;bin&#x2F;graphite construct \
&lt;&#x2F;span&gt;&lt;span&gt; -o rsv1.gra \
&lt;&#x2F;span&gt;&lt;span&gt; -f gra \
&lt;&#x2F;span&gt;&lt;span&gt; data&#x2F;RSV&#x2F;refererence_and_vcf_file&#x2F;9465113.fa data&#x2F;RSV&#x2F;refererence_and_vcf_file&#x2F;H_3801_22_04.freebayes.vcf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;update&quot;&gt;Update&lt;&#x2F;h2&gt;
&lt;p&gt;Formally, &lt;em&gt;progressive construction&lt;&#x2F;em&gt;. Graphite lets the user update a serialized
graph generated via &lt;code&gt;construct&lt;&#x2F;code&gt;.
In the update, it takes serialized graph &lt;code&gt;.gra&lt;&#x2F;code&gt; and variation data in VCF.
Example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;.&#x2F;bin&#x2F;graphite update \
&lt;&#x2F;span&gt;&lt;span&gt; -o rsv2.dot \
&lt;&#x2F;span&gt;&lt;span&gt; -f dot \
&lt;&#x2F;span&gt;&lt;span&gt; rsv1.gra data&#x2F;RSV&#x2F;refererence_and_vcf_file&#x2F;fake_H_3801_22_04.freebayes.vcf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;view&quot;&gt;View&lt;&#x2F;h2&gt;
&lt;p&gt;Graphite allows you to generate graphs in&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;dot&lt;&#x2F;strong&gt; for visualization via &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Graphviz&quot;&gt;GraphViz&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;gfa&lt;&#x2F;strong&gt; for visualization with tools like &lt;a href=&quot;https:&#x2F;&#x2F;rrwick.github.io&#x2F;Bandage&#x2F;&quot;&gt;bandage&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;gra&lt;&#x2F;strong&gt; a serialized graph, it can&#x27;t be visualized.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Using &lt;code&gt;update&lt;&#x2F;code&gt; and &lt;code&gt;view&lt;&#x2F;code&gt;, one can visualize changes introduced by different VCF
files as of writing this.
The view command takes a serialized graph &lt;code&gt;.gra&lt;&#x2F;code&gt;, an output format, and an output
file as arguments.
Example:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;.&#x2F;bin&#x2F;graphite view \
&lt;&#x2F;span&gt;&lt;span&gt; -o rsv1.dot \
&lt;&#x2F;span&gt;&lt;span&gt; -f dot \
&lt;&#x2F;span&gt;&lt;span&gt; rsv1.gra
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;to-do&quot;&gt;To Do&lt;&#x2F;h1&gt;
&lt;p&gt;Look at the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;urbanslug&#x2F;graphite&#x2F;projects&quot;&gt;Graphite project boards&lt;&#x2F;a&gt; for further detail.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;partial-order-alignment&quot;&gt;Partial Order Alignment&lt;&#x2F;h2&gt;
&lt;p&gt;This would allow for aligning reads to a graph or against each other bypassing
the consensus reference.&lt;&#x2F;p&gt;
&lt;p&gt;For now, graphite can only align against strings (however this functionality
isn&#x27;t exposed because it&#x27;s not ready yet) mainly because it only
stores forward edges which makes it hard to implement
Partial Order Alignment (POA) which strictly depends on backward edges.
The short term options are adding a pre-processing
step to generate backward edges or using Racket&#x27;s FFI to call &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rvaser&#x2F;spoa&quot;&gt;spoa&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vgteam&#x2F;gssw&quot;&gt;gssw&lt;&#x2F;a&gt;.
In the medium to long term Graphite&#x27;s nodes should support backward edges which
would, on top of assisting with POA, allow for encoding more complex mutations
such as inversions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;search&quot;&gt;Search&lt;&#x2F;h2&gt;
&lt;p&gt;This involves having a kmer, the substring of a genome, and searching for its
most likely position in the graph.
I have multiple problems with this as of now such as completely not finding
kmers at all or having them point to the wrong location.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;complementarity&quot;&gt;Complementarity&lt;&#x2F;h3&gt;
&lt;p&gt;Graphite doesn&#x27;t support complementarity (only supports the positive strands)
therefore searching for a kmer in the negative strand wouldn&#x27;t even work.
I am evaluating different ways of implementing complementarity.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;a-graph-extension-of-the-burrows-wheeler-transform&quot;&gt;A Graph Extension of the Burrows-Wheeler Transform&lt;&#x2F;h3&gt;
&lt;p&gt;Search doesn&#x27;t work for some strings and even worse the method I am using to
build the index is not ideal. Currently, I am building the FM index via a
Burrows-Wheeler Transform (BWT) which is in turn built from rotating the given
string, this is far from ideal.
A better strategy I am considering is:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;generate a suffix tree via &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Ukkonen%27s_algorithm&quot;&gt;Ukkonen&#x27;s algorithm&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;traverse the suffix tree via a depth-first search to build a suffix array&lt;&#x2F;li&gt;
&lt;li&gt;use the suffix array to generate a BWT&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;I could then complement the BWT and then generate the FM index and therefore
get fast queries onto the graph.
I believe this to be the basic idea behind
&lt;a href=&quot;https:&#x2F;&#x2F;www.biorxiv.org&#x2F;content&#x2F;10.1101&#x2F;051409v1&quot;&gt;A Graph Extension of the Positional Burrows-Wheeler Transform and its Applications&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;adding-a-metadata-field&quot;&gt;Adding a Metadata Field&lt;&#x2F;h2&gt;
&lt;p&gt;We could add a metadata field to the nodes which will allow for something
like inbuilt annotation support.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;miscellaneous&quot;&gt;Miscellaneous&lt;&#x2F;h2&gt;
&lt;p&gt;Another feature not related to Bioinformatics but is surprisingly lacking in Racket
is to extend &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;racket&#x2F;racket&#x2F;blob&#x2F;master&#x2F;racket&#x2F;collects&#x2F;racket&#x2F;cmdline.rkt&quot;&gt;cmdline&lt;&#x2F;a&gt; to have command-line options as is described in
&lt;a href=&quot;https:&#x2F;&#x2F;pavpanchekha.com&#x2F;blog&#x2F;multi-command-line.html&quot;&gt;Multi-command-line in Racket&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To reiterate, you can look at these 3 other posts regarding Graphite:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;njagi.me&#x2F;posts&#x2F;google-summer-of-code-2019-final-submission&#x2F;2019-06-22-Introduction-to-Variation-Graphs.html&quot;&gt;An Introduction to Variation Graphs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;njagi.me&#x2F;posts&#x2F;google-summer-of-code-2019-final-submission&#x2F;2019-07-15-Creating-the-Initial-Variation-Graph.html&quot;&gt;Creating the Initial Variation Graph&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;njagi.me&#x2F;posts&#x2F;google-summer-of-code-2019-final-submission&#x2F;2019-07-21-Justifying-SHA256-in-Graphite.html&quot;&gt;Justifying SHA256 in Graphite&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;acknowledgements&quot;&gt;Acknowledgements&lt;&#x2F;h1&gt;
&lt;p&gt;I&#x27;d like to acknowledge the contribution of the following organizations and people.&lt;&#x2F;p&gt;
&lt;p&gt;Sponsors:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;summerofcode.withgoogle.com&quot;&gt;Google Summer of Code&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.open-bio.org&quot;&gt;Open Bioinformatics Foundation&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;my mentors:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;george-githinji&quot;&gt;George Githinji&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;pjotrp&quot;&gt;Pjotr Prins&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;and those who weren&#x27;t my mentors but helped along the way by offering
technical advice, testing graphite, reading the code or reviewing the blog posts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alanorth&quot;&gt;Alan Orth&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ekg&quot;&gt;Erik Garrison&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;jasonrogena&quot;&gt;Jason Rogena&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;hipstermojo&quot;&gt;Kenneth Gitere&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kevthanewversi&quot;&gt;Kevin Murimi&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Jusifying SHA256 in Graphite</title>
		<published>2019-07-21T00:00:00+00:00</published>
		<updated>2019-07-21T00:00:00+00:00</updated>
		<link href="https://njagi.me/posts/justifying-sha256-in-graphite/" type="text/html"/>
		<id>https://njagi.me/posts/justifying-sha256-in-graphite/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;urbanslug&#x2F;graphite&quot;&gt;Graphite&#x27;s&lt;&#x2F;a&gt; underlying graph implementation is an adjacency hash table, a
complicated way of saying that graphite uses a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Hash_table&quot;&gt;hash table&lt;&#x2F;a&gt; to implement the
graph. The keys of the hash table are SHA256 hashes of the concatenation of: the
&lt;em&gt;sequence&lt;&#x2F;em&gt;, a &lt;em&gt;plus symbol(+)&lt;&#x2F;em&gt;, and the &lt;em&gt;offset&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Hashes also grant us outgoing edge representations, constant time lookups for
queries of known sequence and position, and eliminate duplicates.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;computational-cost-of-hashing&quot;&gt;Computational Cost of Hashing&lt;&#x2F;h1&gt;
&lt;p&gt;We have to compute a hash to uniquely identify each variation and we have to
store each hash twice: first, as a &lt;em&gt;key&lt;&#x2F;em&gt; in the adjacency hash table; and second,
as  a field in the variation &lt;code&gt;structure&lt;&#x2F;code&gt; &lt;em&gt;value&lt;&#x2F;em&gt;.
We must therefore examine the time and space costs of hashing.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;time&quot;&gt;Time&lt;&#x2F;h2&gt;
&lt;p&gt;I couldn&#x27;t find any useful cost data on either the &lt;a href=&quot;https:&#x2F;&#x2F;docs.racket-lang.org&#x2F;sha&#x2F;index.html&quot;&gt;SHA-2 racket implementation&lt;&#x2F;a&gt;
or &lt;a href=&quot;https:&#x2F;&#x2F;nvlpubs.nist.gov&#x2F;nistpubs&#x2F;FIPS&#x2F;NIST.FIPS.180-4.pdf&quot;&gt;SHA-2&lt;&#x2F;a&gt;, the algorithm itself, but being a string algorithm you can assume
it works in O(n) time, n being the length of the string being hashed.&lt;&#x2F;p&gt;
&lt;p&gt;This isn&#x27;t worrying because hashing is a one off cost which has proved
inexpensive with the current variation data-set.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;space&quot;&gt;Space&lt;&#x2F;h2&gt;
&lt;p&gt;This is more of a concern because we expect graphs to grow with time.&lt;&#x2F;p&gt;
&lt;p&gt;A SHA 256 hash takes the same amount of space as a 32 characters string
(8*32=256). Therefore, for variations with sequences fewer than 32 nucleotides,
we store a hash that is larger than the variation we are hashing
(ignoring the plus symbol and offset). This is exemplified in SNP data.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;graph-comparison&quot;&gt;Graph Comparison&lt;&#x2F;h2&gt;
&lt;p&gt;A nice effect from hashing is that we can compare simple graphs derived from the
same reference by comparing their hashes. It goes without saying that there are
better or more general ways to perform graph comparison.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;probability-of-collision&quot;&gt;Probability of Collision&lt;&#x2F;h1&gt;
&lt;p&gt;We can approximate the probability of a collision using the function
P(n) = 1-e&lt;sup&gt;-n&lt;sup&gt;2&lt;&#x2F;sup&gt;&#x2F;(2d)&lt;&#x2F;sup&gt;. Where &lt;em&gt;n is the sample size&lt;&#x2F;em&gt; and &lt;em&gt;d
is the total number of &amp;quot;buckets&amp;quot;&lt;&#x2F;em&gt;.
For more about calculating this probability check out &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Birthday_problem#Approximations&quot;&gt;Birthday Problem Approximations&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;To avoid a collision we need to make sure that our variations are fewer than the
square root of the bucket size—the point at which we get 0.5 chance of having
two different strings sharing the same hash.
Think of it as the halfway point in a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Binomial_distribution&quot;&gt;binomial distribution&lt;&#x2F;a&gt; where past 0.5 we
consider a collision to have occurred. In reality the halfway point occurs
&lt;strong&gt;above&lt;&#x2F;strong&gt; the square root but it&#x27;s still an easy way of verifying that your
sample size is within a safe range.&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s a Racket function derived from the one above that I used to approximate
collision probability.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;(define (probability-of-collision  d n)
&lt;&#x2F;span&gt;&lt;span&gt;  (- 1 (&#x2F; 1 (exp (&#x2F; (expt n 2) (* 2 d))))))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-birthday-paradox&quot;&gt;The Birthday Paradox&lt;&#x2F;h2&gt;
&lt;p&gt;Using the approximation function above, we estimate that for every group of 23
randomly selected people (n=23, d=356), the probability that two of them share a
birthday is 0.5; and in a sample of 357 people (n=357, d=356), the probability
that two of them share a birthday is 1.
&lt;img src=&quot;&#x2F;images&#x2F;Content&#x2F;Graphs&#x2F;birthday.png&quot; alt=&quot;birthday plot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sha-256&quot;&gt;SHA 256&lt;&#x2F;h2&gt;
&lt;p&gt;For SHA 256 the halfway probability of a hash collision occurs at a point above
2&lt;sup&gt;128&lt;&#x2F;sup&gt;
&lt;img src=&quot;&#x2F;images&#x2F;Content&#x2F;Graphs&#x2F;sha256.png&quot; alt=&quot;sha256 plot&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;This may be hard to interpret because exponential functions grow very quickly.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here&#x27;s the Racket code I used to generate these plots:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;#lang racket
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(require plot)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(define (probability-of-collision  d x)
&lt;&#x2F;span&gt;&lt;span&gt;  (- 1 (&#x2F; 1 (exp (&#x2F; (expt x 2) (* 2 d))))))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(define (label-point-at x y)
&lt;&#x2F;span&gt;&lt;span&gt;  (let* ([fn (lambda (v) (if (&amp;gt; v (expt 10 6)) &amp;#39;exponential &amp;#39;positional))]
&lt;&#x2F;span&gt;&lt;span&gt;        [x* (~r #:precision 4 #:notation fn x)]
&lt;&#x2F;span&gt;&lt;span&gt;        [y* (~r #:precision 4 y)])
&lt;&#x2F;span&gt;&lt;span&gt;    (list (vrule x 0 y #:style &amp;#39;long-dash)
&lt;&#x2F;span&gt;&lt;span&gt;          (hrule y 0 x #:style &amp;#39;long-dash)
&lt;&#x2F;span&gt;&lt;span&gt;          (point-label (vector x y) (format &amp;quot;x = ~a    y = ~a&amp;quot; x* y*)))))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(define (plot-probability-of-collison bucket-size label [halfway-probability #f])
&lt;&#x2F;span&gt;&lt;span&gt;  (let ([g (if halfway-probability halfway-probability (sqrt bucket-size))]
&lt;&#x2F;span&gt;&lt;span&gt;        [bucket-size-root (sqrt bucket-size)]
&lt;&#x2F;span&gt;&lt;span&gt;        [fn               ((curry probability-of-collision) bucket-size)])
&lt;&#x2F;span&gt;&lt;span&gt;    (parameterize ([plot-x-transform  log-transform]
&lt;&#x2F;span&gt;&lt;span&gt;                   [plot-width 750])
&lt;&#x2F;span&gt;&lt;span&gt;      (plot
&lt;&#x2F;span&gt;&lt;span&gt;       (list
&lt;&#x2F;span&gt;&lt;span&gt;        (function fn 1  bucket-size #:label label)
&lt;&#x2F;span&gt;&lt;span&gt;        (label-point-at g (fn g)))
&lt;&#x2F;span&gt;&lt;span&gt;       #:x-label &amp;quot;Sample size&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;       #:y-label &amp;quot;Probability of collision&amp;quot;))))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(plot-probability-of-collison 365 &amp;quot;Birthday&amp;quot; 23)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(plot-probability-of-collison (expt 2 256) &amp;quot;SHA 256&amp;quot;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;the-birthday-attack&quot;&gt;The Birthday Attack&lt;&#x2F;h2&gt;
&lt;p&gt;In the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Birthday_attack&quot;&gt;birthday attack&lt;&#x2F;a&gt;, an attacker when given a hash, guesses a string that
will generate the same hash. If there no collisions the attacker would have to
come up with the exact string that generated the hash. If there are collisions
the attacker could get away with guessing a different string.&lt;&#x2F;p&gt;
&lt;p&gt;This is out of the scope of this post but &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Birthday_attack&quot;&gt;birthday attack&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Birthday_problem&quot;&gt;birthday problem&lt;&#x2F;a&gt; wikipedia pages can provide further reading.
There&#x27;s also this lecture on YouTube from the Coursera cryptography course
&lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=5VY2KEh9WrE&quot;&gt;Cryptography generic birthday attack (collision resistance)&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;applied-to-variation&quot;&gt;Applied to Variation&lt;&#x2F;h1&gt;
&lt;p&gt;For a 256 bit hash we have 2&lt;sup&gt;256&lt;&#x2F;sup&gt; as our bucket size.
We then have the square root of that being
2&lt;sup&gt;(256&#x2F;2)&lt;&#x2F;sup&gt; = 2&lt;sup&gt;128&lt;&#x2F;sup&gt; approximately 3.4*10&lt;sup&gt;38&lt;&#x2F;sup&gt; as
the sample size below which we have 0.5 chance of collision.&lt;&#x2F;p&gt;
&lt;p&gt;For context, the human genome is approximately 3*10&lt;sup&gt;6&lt;&#x2F;sup&gt; (billion)
nucleotides long, which is much smaller than  3.4*10&lt;sup&gt;38&lt;&#x2F;sup&gt;.
Viruses have even shorter genomes, ranging in kilo (thousand) nucleotides,
for example, the RSV genome is approximately 15*10&lt;sup&gt;3&lt;&#x2F;sup&gt; nucleotides long
which is even shorter than 3.4*10&lt;sup&gt;38&lt;&#x2F;sup&gt; when compared to the human genome.&lt;&#x2F;p&gt;
&lt;p&gt;The number of variations we expect in these genomes is therefore much smaller
than 2&lt;sup&gt;128&lt;&#x2F;sup&gt;. As a side note, SHA256 is
&lt;a href=&quot;https:&#x2F;&#x2F;youtu.be&#x2F;bBC-nXj3Ng4?t=343&quot;&gt;used to uniquely identify bitcoin&lt;&#x2F;a&gt; which there are a lot of.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;how-much-variation-can-actually-occur&quot;&gt;How Much Variation Can Actually Occur?&lt;&#x2F;h1&gt;
&lt;p&gt;The short answer is: we don&#x27;t know for sure but we can estimate its upper bound.&lt;&#x2F;p&gt;
&lt;p&gt;Given we look at genomes that are in the same species or quasi species we expect
99% similarity.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1% of the human genome would be approximately 3*10&lt;sup&gt;4&lt;&#x2F;sup&gt; (thirty thousand)
nucleotides long.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;1% of RSV would be approximately 15*10&lt;sup&gt;3&lt;&#x2F;sup&gt; (a hundred and fifty)
nucleotides long.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This is the space within which we expect the variation to occur.&lt;&#x2F;p&gt;
&lt;p&gt;Granted, we still don&#x27;t know just how much variation could occur, which in
reality would depend on the organism, we have reduced the problem space by
orders of magnitude below 2&lt;sup&gt;128&lt;&#x2F;sup&gt; making SHA256 look really good.&lt;&#x2F;p&gt;
&lt;p&gt;I expect the biggest problem with SHA256 to come from the space cost of
hashing in terms of both disk and&#x2F;or memory.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Creating the Initial Variation Graph</title>
		<published>2019-07-15T00:00:00+00:00</published>
		<updated>2019-07-15T00:00:00+00:00</updated>
		<link href="https://njagi.me/posts/creating-the-initial-variation-graph/" type="text/html"/>
		<id>https://njagi.me/posts/creating-the-initial-variation-graph/</id>
		<content type="html">&lt;p&gt;Variation graphs represent the reference genome as a graph.
For an introduction, read my previous post &lt;a href=&quot;https:&#x2F;&#x2F;njagi.me&#x2F;posts&#x2F;creating-the-initial-variation-graph&#x2F;2019-06-22-Introduction-to-Variation-Graphs.html&quot;&gt;An Introduction to Variation Graphs&lt;&#x2F;a&gt;
or &lt;a href=&quot;https:&#x2F;&#x2F;ekg.github.io&#x2F;2019&#x2F;07&#x2F;09&#x2F;Untangling-graphical-pangenomics&quot;&gt;Untangling graphical pangenomics&lt;&#x2F;a&gt; by Erik Garrison.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Core to variation graphs is the maintenance of a tight mapping
between the reference and the graph.
To maintain this mapping we establish a &lt;em&gt;coordinate system&lt;&#x2F;em&gt; — a way to reliably
associate a node in the graph, with a position in the reference and vice versa.
&lt;img src=&quot;&#x2F;images&#x2F;Content&#x2F;Graphs&#x2F;coordinate_system.png&quot; alt=&quot;coordinate systems&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;a-coordinate-system&quot;&gt;A Coordinate System&lt;&#x2F;h1&gt;
&lt;p&gt;We use the concepts &lt;strong&gt;offset&lt;&#x2F;strong&gt; and &lt;strong&gt;ref&lt;&#x2F;strong&gt; to maintain a coordinate system.&lt;&#x2F;p&gt;
&lt;p&gt;An &lt;strong&gt;offset&lt;&#x2F;strong&gt; is the number of bases from the first node where the
variation occurs; offsets are one-indexed in the reference but zero-indexed in
the graph. Offsets are suited to translating linear reference to graphs because
it&#x27;s how variations are viewed within the reference anyway.&lt;&#x2F;p&gt;
&lt;p&gt;For example, we could represent a variation &amp;quot;A&amp;quot; occuring at position 3 in the 
reference &amp;quot;ATCGAT&amp;quot; as:
&lt;img src=&quot;&#x2F;images&#x2F;Content&#x2F;Graphs&#x2F;offsets.svg&quot; alt=&quot;offsets&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Notice how we start counting from 0 in the graph? We call that being zero-indexed.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;strong&gt;ref&lt;&#x2F;strong&gt; is a unique identifier which we get from the reference
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;FASTA_format#Description_line&quot;&gt;description line&lt;&#x2F;a&gt;. A graph created from just one reference will have all nodes
contain the same value in the &lt;code&gt;ref&lt;&#x2F;code&gt; field.&lt;&#x2F;p&gt;
&lt;p&gt;As you may have suspected, some problems arise from this coordinate system.
They are a matter of &lt;em&gt;progressive update&lt;&#x2F;em&gt; and &lt;em&gt;read alignment&lt;&#x2F;em&gt; but not a matter
of initial graph construction and are therefore beyond the scope of this post.
They include:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Dealing with nodes that are from alignments i.e. not aligned to a linear
sequence&lt;&#x2F;li&gt;
&lt;li&gt;Changes in the linear reference which change the coordinate system.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h1 id=&quot;structure-of-the-graph&quot;&gt;Structure of the Graph&lt;&#x2F;h1&gt;
&lt;p&gt;Properties of our graph:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Directed acyclic graph&lt;&#x2F;li&gt;
&lt;li&gt;Offsets are &lt;strong&gt;increasing&#x2F;ascending&lt;&#x2F;strong&gt; natural numbers as we walk through the
graph&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;node&quot;&gt;Node&lt;&#x2F;h2&gt;
&lt;p&gt;A node is built out of a racket &lt;code&gt;structure&lt;&#x2F;code&gt;, a &lt;code&gt;struct&lt;&#x2F;code&gt; in many
languages, with the following fields:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;center&quot;&gt;Name&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;segment&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;a string of alphabet A, T, C, and G&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;offset&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;offset from zero on the reference&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;id&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;sha256 hash of the concatenation of segment, &amp;quot;+&amp;quot; and offset&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;ref&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;reference from which the segment is derived&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;links&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;a list of the IDs of the next nodes&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;The use of &lt;code&gt;segment&lt;&#x2F;code&gt; and &lt;code&gt;links&lt;&#x2F;code&gt; to mean &lt;code&gt;vertices&lt;&#x2F;code&gt; and &lt;code&gt;edges&lt;&#x2F;code&gt; are inspired by
&lt;a href=&quot;https:&#x2F;&#x2F;lh3.github.io&#x2F;2014&#x2F;07&#x2F;19&#x2F;a-proposal-of-the-grapical-fragment-assembly-format&quot;&gt;A proposal of the Graphical Fragment Assembly format&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We generate a sha256 hash out of the segment, a plus symbol and the offset to
generate a value for &lt;code&gt;id&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;For example, given a segment &lt;em&gt;&amp;quot;ATCGATG&amp;quot;&lt;&#x2F;em&gt; at offset &lt;em&gt;34&lt;&#x2F;em&gt; we can generate an ID
like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;generate-id(&amp;lt;string&amp;gt; segment, &amp;lt;natural-number&amp;gt; offset)
&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F;&#x2F; take note of the + sign in the concatenation
&lt;&#x2F;span&gt;&lt;span&gt;  string-and-offset  &amp;lt;- concatenate(&amp;quot;ATCGATG&amp;quot;, &amp;quot;+&amp;quot;,&amp;quot;34&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;  hash-as-bytestring &amp;lt;- sha256hash(string-and-offset)
&lt;&#x2F;span&gt;&lt;span&gt;  id                 &amp;lt;- bytestring-to-hex-string(hash-as-bytestring)
&lt;&#x2F;span&gt;&lt;span&gt;  return id
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I chose hashes over UUIDs because they are reproducible and will
have constant time lookups in the occasion that we want to retrieve a node from
the graph given its sequence and offset. This should come in handy in
visualization especially on the web.&lt;&#x2F;p&gt;
&lt;p&gt;I also considered the likelihood of collisions in the hashes. I  expect it to be
low when dealing with 15,000 base pair size viruses.
I shall expound on this in a later post.
One thing to note is that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vgteam&#x2F;vg&quot;&gt;vg&lt;&#x2F;a&gt; uses UUIDs and they work for
human genome so I believe &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;urbanslug&#x2F;graphite&quot;&gt;graphite&lt;&#x2F;a&gt;, the tool that I&#x27;m writing to implement
this, can get away with sha256 hashes for more complex genomes.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;variation&quot;&gt;Variation&lt;&#x2F;h2&gt;
&lt;p&gt;A variation is a &lt;code&gt;structure&lt;&#x2F;code&gt; containing the following fields:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;center&quot;&gt;Name&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;Description&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;segment&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;a string of single of alphabet A, T, C, and G&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;offset&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;offset from zero on the reference&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;ref&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;an identifier of the reference it&#x27;s derived from&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;It is extracted from a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Variant_Call_Format&quot;&gt;Variant Call Format&lt;&#x2F;a&gt; file, the main file format for genomic
variation data.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-graph&quot;&gt;The Graph&lt;&#x2F;h2&gt;
&lt;p&gt;I had to implement a graph in graphite due to the lack of serialization (a
required feature for progressive updates) in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;stchang&#x2F;graph&quot;&gt;racket graph library&lt;&#x2F;a&gt;;
I would have preferred to &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;stchang&#x2F;graph&#x2F;issues&#x2F;47&quot;&gt;add serialization support to graph&lt;&#x2F;a&gt; but couldn&#x27;t
do that and still stay on track with graphite.&lt;&#x2F;p&gt;
&lt;p&gt;The graph is built out of an adjacency map of &lt;code&gt;id&lt;&#x2F;code&gt;, key, to &lt;code&gt;node&lt;&#x2F;code&gt;, value.&lt;&#x2F;p&gt;
&lt;p&gt;Using a &lt;code&gt;hash table&lt;&#x2F;code&gt; and not a &lt;code&gt;list&lt;&#x2F;code&gt; has the following pros:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;no duplicates&lt;&#x2F;li&gt;
&lt;li&gt;constant-time lookups if we have a &lt;code&gt;segment&lt;&#x2F;code&gt; and its &lt;code&gt;offset&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;and cons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;lacks ordering despite linear offsets which would come in handy for updates&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;construction&quot;&gt;Construction&lt;&#x2F;h1&gt;
&lt;p&gt;The general idea is:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Given a &lt;code&gt;list&lt;&#x2F;code&gt; of variation &lt;code&gt;structures&lt;&#x2F;code&gt; &lt;strong&gt;sorted&lt;&#x2F;strong&gt; by &lt;code&gt;offset&lt;&#x2F;code&gt; and a
linear reference (&lt;code&gt;string&lt;&#x2F;code&gt;).&lt;&#x2F;li&gt;
&lt;li&gt;Loop through each variation and insert an alternative segment into the
reference at the position specified in the variation.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;In the case of graphite, we recursively split the reference into a &lt;em&gt;list&lt;&#x2F;em&gt; of
&lt;em&gt;pairs&lt;&#x2F;em&gt; that imply directionality.
For example, the pair &lt;code&gt;(a b)&lt;&#x2F;code&gt; would translate to an edge from &lt;em&gt;node a&lt;&#x2F;em&gt; to &lt;em&gt;node b&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;We then have a function &lt;code&gt;gen-directed-graph&lt;&#x2F;code&gt; that takes this &lt;code&gt;list&lt;&#x2F;code&gt; of &lt;code&gt;pairs&lt;&#x2F;code&gt;
and generates a directed graph from it using &lt;code&gt;foldl&lt;&#x2F;code&gt;. Graphite creates the graph
in the 3 steps detailed below.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1-generate-a-node-list-of-pairs&quot;&gt;1. Generate a Node List (of Pairs)&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;O(n)&lt;&#x2F;em&gt;; n being the size of the variation list&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;gen-node-list(reference, variations, prev-position = f, prev-nodes = &amp;lt;empty-list&amp;gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  if empty-list? variations
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; the base case of gen node list
&lt;&#x2F;span&gt;&lt;span&gt;    cap(reference, previous-position, previous-nodes)
&lt;&#x2F;span&gt;&lt;span&gt;  else if (is-number previous-position) and (previous-position = current-offset)
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; we have more than one variation in this position
&lt;&#x2F;span&gt;&lt;span&gt;    handle-duplicate(reference, variations, previous-position, previous-nodes)
&lt;&#x2F;span&gt;&lt;span&gt;  else
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; we have just one variation in this position
&lt;&#x2F;span&gt;&lt;span&gt;    handle-unique(reference, variations, previous-position, previous-nodes)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;reference&lt;&#x2F;strong&gt;: the linear reference&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;variations&lt;&#x2F;strong&gt;: a list of variations&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;prev-position&lt;&#x2F;strong&gt;: the offset of the previous variation
&lt;ul&gt;
&lt;li&gt;the default value is false. (I wish I used an int here)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;prev-nodes&lt;&#x2F;strong&gt;: the previous node or nodes with relation to the current one
&lt;ul&gt;
&lt;li&gt;the default value is an empty list.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;A mutually recursive function takes from the &lt;code&gt;tail&lt;&#x2F;code&gt; of variation list,
&lt;code&gt;variations&lt;&#x2F;code&gt;, and returns a list of pair of nodes &lt;code&gt;(a, b)&lt;&#x2F;code&gt; where the direction
of the nodes is &lt;code&gt;a -&amp;gt; b&lt;&#x2F;code&gt; for example a list like &lt;code&gt;[(a b), (b c), (c d)]&lt;&#x2F;code&gt; should
later  translate to &lt;code&gt;a -&amp;gt; b -&amp;gt; c -&amp;gt; d&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-1-cap&quot;&gt;1.1 Cap&lt;&#x2F;h3&gt;
&lt;p&gt;Creates the initial variation i.e &amp;quot;caps&amp;quot; the directed graph.
It creates a first node that points to the first variations.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;cap(reference, previous-position, previous-nodes)
&lt;&#x2F;span&gt;&lt;span&gt;  map(
&lt;&#x2F;span&gt;&lt;span&gt;    lambda node: (substring(reference, 0, previous-position), node)
&lt;&#x2F;span&gt;&lt;span&gt;    previous-nodes
&lt;&#x2F;span&gt;&lt;span&gt;    )
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;1-2-handle-unique&quot;&gt;1.2 Handle Unique&lt;&#x2F;h3&gt;
&lt;p&gt;Inserts a variation where there isn&#x27;t an alternative.
In a case where there&#x27;s only 1 alternative path so we break the current sequence
and insert our alternative path, for example,  &lt;code&gt;a -&amp;gt; b&lt;&#x2F;code&gt; and &lt;code&gt;a -&amp;gt; c&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;handle-unique(reference, variations, previous-position, previous-nodes)
&lt;&#x2F;span&gt;&lt;span&gt;  ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;1-3-handle-duplicate&quot;&gt;1.3 Handle Duplicate&lt;&#x2F;h3&gt;
&lt;p&gt;Inserts extra alternative variations where they already exist.
for example &lt;code&gt;a -&amp;gt; b&lt;&#x2F;code&gt;, &lt;code&gt;a -&amp;gt; c&lt;&#x2F;code&gt; and &lt;code&gt;a -&amp;gt; d&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;handle-duplicate(reference, variations, previous-position, previous-nodes)
&lt;&#x2F;span&gt;&lt;span&gt;  ...
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;2-generate-a-directed-graph-out-of-a-list-of-pairs&quot;&gt;2. Generate a Directed Graph Out of a List of Pairs&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;em&gt;O(n)&lt;&#x2F;em&gt;; with n being the size of the list of pairs&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;gen-directed-graph(g, list-of-pairs)
&lt;&#x2F;span&gt;&lt;span&gt;  foldl(
&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F;&#x2F; make sure that you&amp;#39;re not overwriting the list of edges of a node as you
&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F;&#x2F; update it. This check makes `gen-directed-graph` slow approx 4n.
&lt;&#x2F;span&gt;&lt;span&gt;  lambda pair: add-adjacent-node(g, first(pair), second(pair))
&lt;&#x2F;span&gt;&lt;span&gt;  g
&lt;&#x2F;span&gt;&lt;span&gt;  list-of-pairs)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;g&lt;&#x2F;strong&gt;: a graph&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;list-of-pairs&lt;&#x2F;strong&gt;: a list of pairs&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The reason for the bad performance of &lt;code&gt;gen-directed-graph&lt;&#x2F;code&gt; is that it checks to
avoid overwriting any existing nodes.
This is to mean that if there&#x27;s a relationship like:
&lt;code&gt;a -&amp;gt; b&lt;&#x2F;code&gt; and &lt;code&gt;a -&amp;gt; c&lt;&#x2F;code&gt;
we have to make sure not to lose the edge &lt;code&gt;a -&amp;gt; b&lt;&#x2F;code&gt; when creating &lt;code&gt;a -&amp;gt; c&lt;&#x2F;code&gt;.
It, however, does suffice for virus data.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-return-a-variation-graph&quot;&gt;3. Return a Variation Graph&lt;&#x2F;h2&gt;
&lt;p&gt;A composition of &lt;code&gt;gen-node-list&lt;&#x2F;code&gt; and &lt;code&gt;gen-directed-graph&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;gen-vg(reference, variations)
&lt;&#x2F;span&gt;&lt;span&gt;  node-list &amp;lt;- gen-node-list(reference, variation)
&lt;&#x2F;span&gt;&lt;span&gt;  graph     &amp;lt;- gen-directed-graph(node-list)
&lt;&#x2F;span&gt;&lt;span&gt;  return graph
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;visualization-and-output&quot;&gt;Visualization and Output&lt;&#x2F;h1&gt;
&lt;p&gt;Graphite supports the generation of graphs in:
&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;GFA-spec&#x2F;GFA-spec&quot;&gt;GFA&lt;&#x2F;a&gt;, for interoperability with tools such as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vgteam&#x2F;vg&quot;&gt;vg&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;rrwick.github.io&#x2F;Bandage&#x2F;&quot;&gt;bandage&lt;&#x2F;a&gt;;
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;DOT_(graph_description_language)&quot;&gt;DOT&lt;&#x2F;a&gt;, for visualization; and a serialized form, .gra.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;optimization-idea&quot;&gt;Optimization Idea&lt;&#x2F;h1&gt;
&lt;p&gt;Representing the alphabet in 4 bits, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;biod&#x2F;BioD&#x2F;blob&#x2F;57c81f275faab5cdec4746bfc7af81e31bac0f69&#x2F;bio&#x2F;core&#x2F;base.d#L64&quot;&gt;as is done in BioD&lt;&#x2F;a&gt;, because:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;the extra bits accommodate ambiguous bases&lt;&#x2F;li&gt;
&lt;li&gt;we could then perform fast and efficient complimenting though bit shifting&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;The alphabet would be:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A as 0001&lt;&#x2F;li&gt;
&lt;li&gt;C as 0010&lt;&#x2F;li&gt;
&lt;li&gt;T as 0100&lt;&#x2F;li&gt;
&lt;li&gt;G as 1000&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;However, most of the optimization would come from graph creation, graph
update and search which is what I&#x27;m focused on for now.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>An Introduction to Variation Graphs</title>
		<published>2019-06-22T00:00:00+00:00</published>
		<updated>2019-06-22T00:00:00+00:00</updated>
		<link href="https://njagi.me/posts/introduction-to-variation-graphs/" type="text/html"/>
		<id>https://njagi.me/posts/introduction-to-variation-graphs/</id>
		<content type="html">&lt;p&gt;I expect the audience of this post to be both programmers and biologists so I&#x27;ll
bring you up to speed on a topic before going into it.
Feel free to skip a sentence, paragraph or even section if you&#x27;re familiar with a topic.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;genome-sequencing&quot;&gt;Genome sequencing&lt;&#x2F;h2&gt;
&lt;p&gt;A &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Genome&quot;&gt;genome&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt; is the entire genetic code of an organism. While computational data
is  represented in binary form, ones, and zeros, biochemical data is represented
by nitrogenous &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Base_(chemistry)&quot;&gt;bases&lt;&#x2F;a&gt; that seem to stick out of a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;DNA&quot;&gt;DNA&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;RNA&quot;&gt;RNA&lt;&#x2F;a&gt; molecule&#x2F;strand
abbreviated A, T, C, and G for DNA and A, G, C and U for RNA.
We care about RNA because some viruses have RNA and not
DNA.&lt;&#x2F;p&gt;
&lt;p&gt;If this is confusing, you can think of a strand of DNA or RNA as a thread  with
knots where each knot is a base.&lt;&#x2F;p&gt;
&lt;p&gt;A &lt;strong&gt;sequence&lt;&#x2F;strong&gt; is an &lt;em&gt;ordering&lt;&#x2F;em&gt; of something.
A programming analog is a sequence vs a collection. Sequences are ordered,
for example lists, and therefore have the potential for a &lt;em&gt;next&lt;&#x2F;em&gt; and a &lt;em&gt;previous&lt;&#x2F;em&gt;
element while collections are just data thrown together, for example, a
dictionary or a set.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Genome sequencing&lt;&#x2F;strong&gt; (or sequencing a genome) therefore, is determining the
order of bases in all of the DNA or RNA in an organism. What makes this easy is
that all the cells in an individual organism have the same DNA so we can
get all the DNA in an organism from a single cell.
In practice, however, we can&#x27;t work with a single cell due to its size.
Ignore chromosomes, haplotypes and other things you may know about DNA for now.&lt;&#x2F;p&gt;
&lt;p&gt;To determine the sequence of bases in an entire genome of an organism we focus
on only one of the alleles (a &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Haplotype&quot;&gt;haplotype&lt;&#x2F;a&gt;) and only one strand of the
double helix.
Since 2005 we&#x27;ve used methods broadly categorized
under &lt;strong&gt;Next Generation Sequencing (NGS)&lt;&#x2F;strong&gt; to perform genome sequencing.
There are two main ways of performing NGS:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Shear the DNA into small fragments, sequence those and try to build back the
original sequence. An analogy that’s used is shredding a newspaper article
then trying to recreate it.&lt;&#x2F;li&gt;
&lt;li&gt;Run the DNA strand like a train would run through a tunnel through a pore
and read the sequence of bases.
There are other methods of reading entire strands of DNA but they don&#x27;t matter
in this context.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;As you would expect, each method has its drawbacks and advantages.
What we get out of the machine that does the actual sequencing of DNA is called
a read and reads have to be &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Sequence_alignment&quot;&gt;aligned&lt;&#x2F;a&gt; and
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Sequence_assembly&quot;&gt;assembled&lt;&#x2F;a&gt;&lt;sup&gt;2&lt;&#x2F;sup&gt;.
Alignment involves stacking reads on top of each other and assembling is the
greater process that involves alignment, algorithmically choosing the best
alignment and determining what the original sequence was.&lt;&#x2F;p&gt;
&lt;p&gt;There are two broad categories of assembly&lt;sup&gt;4&lt;&#x2F;sup&gt;:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;De-novo assembly:&lt;&#x2F;strong&gt; this is where we sequence a genome that has never been
sequenced before&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Mapping assembly:&lt;&#x2F;strong&gt; this is sequencing an organism’s unique code despite
having the general sequence for the species. What you get from services
like &lt;a href=&quot;https:&#x2F;&#x2F;www.23andme.com&#x2F;en-int&#x2F;&quot;&gt;23andMe&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;the-reference-genome&quot;&gt;The reference genome&lt;&#x2F;h2&gt;
&lt;p&gt;A &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Reference_genome&quot;&gt;reference genome&lt;&#x2F;a&gt; is a consensus sequence that accepted as the genome of a
species&lt;sup&gt;2&lt;&#x2F;sup&gt;. It’s stored as one long sequence of characters&#x2F;bases.
You may wonder how we can have a known genome of an entire species when every
individual has a unique genetic code or how &lt;a href=&quot;https:&#x2F;&#x2F;www.scientificamerican.com&#x2F;article&#x2F;tiny-genetic-differences-between-humans-and-other-primates-pervade-the-genome&#x2F;&quot;&gt;humans are 99% chimp&lt;&#x2F;a&gt;.
Well, the answer is that genetic code of most organisms
is similar and this similarity increases as we narrow down taxonomically.
When we say that &lt;a href=&quot;https:&#x2F;&#x2F;www.scientificamerican.com&#x2F;article&#x2F;tiny-genetic-differences-between-humans-and-other-primates-pervade-the-genome&#x2F;&quot;&gt;a human is closer to a chimp than a monkey&lt;&#x2F;a&gt; what we mean is
that we can observe greater variation between the genomes of the two, man+chimp vs monkey, than man vs chimp alone.&lt;&#x2F;p&gt;
&lt;p&gt;This isn&#x27;t actual math but may help clear things up.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;variation(combine_genomes(man, chimp), monkey) &amp;gt; variation(man, chimp)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h1 id=&quot;variation-in-genomes&quot;&gt;Variation in genomes&lt;&#x2F;h1&gt;
&lt;p&gt;However, there are still genomic differences and they should not be ignored.
&lt;em&gt;The ignoring of differences is implicit in a linear reference.&lt;&#x2F;em&gt;
A better way to describe them is to say that the differences are segregating within the population.
We may also want to carry out a comparison between species or between related
species which is done in &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Pan-genome&quot;&gt;pangenomics&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;DNA has sections which are identical between individuals (conserved regions), and
the number of these  sections grow as we narrow down taxonomically and there are
sections which vary between individuals, for example, the short sequence repeats
that are compared in paternity testing.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Graph_theory&quot;&gt;Graph theory&lt;&#x2F;a&gt; is an area in math that can help us understand variable
regions within genomes. The idea of representing genomes as graphs isn’t new,
however, the low number of tools like &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;vgteam&#x2F;vg&quot;&gt;vg&lt;&#x2F;a&gt; which apply graph theory to genomics
and the little that we know about genomes has been a drawback.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;graphs&quot;&gt;Graphs&lt;&#x2F;h1&gt;
&lt;p&gt;A &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Graph_theory&quot;&gt;graph&lt;&#x2F;a&gt; is a series of vertices (also known as nodes) and edges.
&lt;img src=&quot;&#x2F;images&#x2F;Content&#x2F;Graphs&#x2F;all_graphs.png&quot; alt=&quot;all graphs&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;For genome graphs, we focus on directed acyclic graphs.
A &lt;strong&gt;walk&lt;&#x2F;strong&gt; in a directed graph is traversal from one node to another through an
edge, for example, &lt;em&gt;a&lt;&#x2F;em&gt; to &lt;em&gt;b&lt;&#x2F;em&gt; to &lt;em&gt;d&lt;&#x2F;em&gt; or &lt;em&gt;a&lt;&#x2F;em&gt; to &lt;em&gt;c&lt;&#x2F;em&gt; to &lt;em&gt;d&lt;&#x2F;em&gt;.
&lt;img src=&quot;&#x2F;images&#x2F;Content&#x2F;Graphs&#x2F;directed_graph.png&quot; alt=&quot;directed graph&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h1 id=&quot;the-current-state-of-affairs&quot;&gt;The current state of affairs&lt;&#x2F;h1&gt;
&lt;p&gt;Once the reference genome of an organism has been determined, it is stored in
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;FASTA_format&quot;&gt;fasta format&lt;&#x2F;a&gt; which contains the sequence and metadata. Moving forward, anyone
sequencing the same species aligns against this reference. Differences that occur
in less than 1% of the reads are usually thrown out;
the ones that aren’t thrown out don’t help to update the reference but are stored
in &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Variant_Call_Format&quot;&gt;Variant Call Format (VCF)&lt;&#x2F;a&gt; which contains the variation data and their
positions plus metadata. These VCF files are spread out amongst researchers and
aid in the particular thing being researched but generally don’t contribute in
and of themselves to the general genomic body of knowledge.
However, every once in awhile the reference is updated but not on a fixed
schedule&lt;sup&gt;2&lt;&#x2F;sup&gt;.
It’s for this reason that the variation graph would be a good way of
representing the reference. There is research that confirmed that short
reads align better to the variation graph than to a linear reference&lt;sup&gt;3&lt;&#x2F;sup&gt;.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;graphs-and-genomes&quot;&gt;Graphs and genomes&lt;&#x2F;h1&gt;
&lt;p&gt;Graphs that are applied to genomes are generally called &lt;strong&gt;genome graphs&lt;&#x2F;strong&gt;.
However, there are two more specific categories which are sequence graphs and
variation graphs.&lt;&#x2F;p&gt;
&lt;p&gt;As an example assume that we zoom on a hypothetical reference: &lt;strong&gt;&amp;quot;ACTGAATTTGTA&amp;quot;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;center&quot;&gt;Variation&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;Position&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;Alternative&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;Variation1&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;2&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;GGGA&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;Variation2&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;4&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;C&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;We could recursively insert Variation1 at position 2 and Variation2 at position
4 to generate the graph below:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;Content&#x2F;Graphs&#x2F;example.png&quot; alt=&quot;sequence graph&quot; &#x2F;&gt;
(generated using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;urbanslug&#x2F;graphite&quot;&gt;graphite&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;urbanslug&#x2F;graph&quot;&gt;my current fork of graph&lt;&#x2F;a&gt;)&lt;&#x2F;p&gt;
&lt;p&gt;In this case, a single walk would represent a possible genome. Compared to the
reference, this variation information is maintained and the graph still holds
the data that was in reference.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;sequence-graphs&quot;&gt;Sequence Graphs&lt;&#x2F;h2&gt;
&lt;p&gt;These are graphs with sequence labels on the nodes or edges.&lt;&#x2F;p&gt;
&lt;p&gt;Sequence graphs or equivalent structures have been used previously to represent
multiple sequences that contain shared differences or ambiguities in a single
structure. Related structures used in genome assembly which collapse long
repeated sequences, so the same nodes are used for different regions of the
genome include the &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;De_Bruijn_graph&quot;&gt;De Bruijn graph&lt;&#x2F;a&gt;&lt;sup&gt;5&lt;&#x2F;sup&gt;. Graphs to represent genetic variation
have previously been used for microbial genomes &amp;amp; localized regions of the human
genome such as the major &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Histocompatibility&quot;&gt;histocompatibility&lt;&#x2F;a&gt; complex.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;variation-graphs&quot;&gt;Variation Graphs&lt;&#x2F;h2&gt;
&lt;p&gt;A variation graph is a sequence graph together with a set of paths representing
possible sequences from a population. However, what makes it so unique is it&#x27;s
tight mapping between the graph and the reference.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;variation-graphs-and-rsv&quot;&gt;Variation graphs and RSV&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Human_orthopneumovirus&quot;&gt;Human orthopneumovirus&lt;&#x2F;a&gt;, formerly known as Respiratory Syncytial Virus (RSV),
is a single-stranded RNA virus and a good candidate for exploration using the
variation graph because viruses don’t have proofreading in their genetic code.
Proofreading is a process in which the cell ensures that it has copied the
genetic code correctly in preparation for cell division. Without proofreading,
errors will be commonplace leading to high mutation rates.
Another advantage is the size of its genome; the reference stands at
15,206 bases which translate to 15206 bytes or 14.8 KB of memory.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;generating-a-variation-graph&quot;&gt;Generating a variation graph&lt;&#x2F;h1&gt;
&lt;p&gt;As of writing this, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;urbanslug&#x2F;graphite&quot;&gt;graphite&lt;&#x2F;a&gt; can’t generate a graph out of reads alone
(perform an alignment). It supports a reference in fasta and a single VCF file.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll detail the algorithm in a &lt;a href=&quot;&#x2F;posts&#x2F;2019-07-15-Creating-the-Initial-Variation-Graph.html&quot;&gt;later post&lt;&#x2F;a&gt; but the gist of it is this:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Load the reference into memory or read a chunk of it if you wish&lt;&#x2F;li&gt;
&lt;li&gt;Load your variation data from a VCF&lt;&#x2F;li&gt;
&lt;li&gt;Organize variations into structs containing
&lt;ul&gt;
&lt;li&gt;variation&lt;&#x2F;li&gt;
&lt;li&gt;position&lt;&#x2F;li&gt;
&lt;li&gt;reference&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Sort the variations in ascending order by position&lt;&#x2F;li&gt;
&lt;li&gt;Using a right fold function - for support of streams
&lt;ol&gt;
&lt;li&gt;fold through the list of variations&lt;&#x2F;li&gt;
&lt;li&gt;At each variation position split the reference and create a list of:
&lt;ul&gt;
&lt;li&gt;the string to the left&lt;&#x2F;li&gt;
&lt;li&gt;string to the right&lt;&#x2F;li&gt;
&lt;li&gt;a list of the variation and the base that was there originally (this will be a list of lists)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;Create directed graph out of the list of lists generated by the fold
* &lt;code&gt;&#x27;((a b) (a c)) to become a node with edges from a to b and c to be and a-&amp;gt;b and a-&amp;gt;b&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;variation&quot;&gt;Variation&lt;&#x2F;h2&gt;
&lt;p&gt;A variation is a struct of &lt;code&gt;position&lt;&#x2F;code&gt; and &lt;code&gt;sequence&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I’m using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;stchang&#x2F;graph&quot;&gt;racket graph library graph&lt;&#x2F;a&gt; to generate a graph out of the nested
lists and treating the graph as a “dynamic tree”.&lt;&#x2F;p&gt;
&lt;p&gt;We then rely on graph to generate an unweighted directed graph through
&lt;a href=&quot;https:&#x2F;&#x2F;docs.racket-lang.org&#x2F;graph&#x2F;index.html#%28def._%28%28lib._graph%2Fmain..rkt%29._unweighted-graph%2Fdirected%29%29&quot;&gt;unweighted-graph&#x2F;directed&lt;&#x2F;a&gt;.
We export the graph in dot format and visualize via &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Graphviz&quot;&gt;graphviz&lt;&#x2F;a&gt;. Serialization isn’t implemented yet.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;references&quot;&gt;References&lt;&#x2F;h1&gt;
&lt;ol&gt;
&lt;li&gt;Adam M. Novak, Erik Garrison, Benedict Paten A graph extension of the positional burrows-wheeler transform and its applications bioRxiv 051409; doi: https:&#x2F;&#x2F;doi.org&#x2F;10.1101&#x2F;051409&lt;&#x2F;li&gt;
&lt;li&gt;Church DM, Schneider VA, Graves T, Auger K, Cunningham F, Bouk N, et al. (2011) Modernizing Reference Genome Assemblies. PLoS Biol 9(7): e1001091. https:&#x2F;&#x2F;doi.org&#x2F;10.1371&#x2F;journal.pbio.1001091&lt;&#x2F;li&gt;
&lt;li&gt;Garrison, Erik &amp;amp; Sirén, Jouni &amp;amp; M Novak, Adam &amp;amp; Hickey et al. (2018). Variation graph toolkit improves read mapping by representing genetic variation in the reference. Nature Biotechnology. 36. 10.1038&#x2F;nbt.4227&lt;&#x2F;li&gt;
&lt;li&gt;Wolf, Beat. &amp;quot;De novo genome assembly versus mapping to a reference genome&amp;quot; (PDF). University of Applied Sciences Western Switzerland. Retrieved 6 April 2019.&lt;&#x2F;li&gt;
&lt;li&gt;Holley, Guillaume &amp;amp; Peterlongo, Pierre. (2012). BLASTGRAPH: Intensive approximate pattern matching in sequence graphs and de-Bruijn graphs. Proceedings of the Prague Stringology Conference, PSC 2012.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Pipeline as Code—Overview</title>
		<published>2017-10-13T00:00:00+00:00</published>
		<updated>2017-10-13T00:00:00+00:00</updated>
		<link href="https://njagi.me/posts/code-pipeline-overview/" type="text/html"/>
		<id>https://njagi.me/posts/code-pipeline-overview/</id>
		<content type="html">&lt;p&gt;Pipeline in this context refers to the collection of steps software goes through
from planning to deployment. Pipeline as code is having this pipeline be stored
in an executable or&#x2F;and a version controllable way.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Why does this matter? A code pipeline that is executable and&#x2F;or version
controllable:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;is easy to keep tracking of as changes occur&lt;&#x2F;li&gt;
&lt;li&gt;makes it possible to keep track of the actual and all possible agents of change (people and&#x2F;or hosts)&lt;&#x2F;li&gt;
&lt;li&gt;reduces repitition and consequently saves time&lt;&#x2F;li&gt;
&lt;li&gt;is easy to delegate parts of to tools or completely automate&lt;&#x2F;li&gt;
&lt;li&gt;has clear and consistent history&lt;&#x2F;li&gt;
&lt;li&gt;has immutable code pipeline history meaning we can revert to previous stable state&lt;&#x2F;li&gt;
&lt;li&gt;in case of failure, the broken state can be reproduced and post moterms performed&lt;&#x2F;li&gt;
&lt;li&gt;is much it easier to maintain and keep track of its components in complex architechtures such as microservices&lt;&#x2F;li&gt;
&lt;li&gt;makes it much easier to build tools that lower the bar of entry into ops such as running ansible plays and chatops bots&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Pipeline as code is the next step in planning, provisioning, configuration
management and application deployment, continuous integration and continuous
deployment.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s also a great way to manage growing complexity in terms of both
the architechture and teams involved. I just threw a number of buzzwords around
so let me explain each of them and why they matter.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;It&#x27;s important to note that the tools used in each step have a lot of overlap between them and a tool is likely to show up in multple sections.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;planning&quot;&gt;Planning&lt;&#x2F;h3&gt;
&lt;p&gt;Since we can&#x27;t execute plans as code, yet; we have to settle for version
controlling them.
Save your execution plans as documentation in a &lt;code&gt;docs&#x2F;&lt;&#x2F;code&gt; directory or a git
submodule (or any other format) files and put them in version control.&lt;&#x2F;p&gt;
&lt;p&gt;You can also commit &lt;code&gt;.org&lt;&#x2F;code&gt; files you created during meetings, export them into
&lt;code&gt;.md&lt;&#x2F;code&gt; and add them as docs.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tools: version control systems&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;provisioning&quot;&gt;Provisioning&lt;&#x2F;h3&gt;
&lt;p&gt;Provision is the past participle of provide, in this context it means providing
everything that your application will need to run.&lt;&#x2F;p&gt;
&lt;p&gt;It is an implementation of the infrastructure diagram&#x2F;plan; it involves the
to run the software. That is: where to host it, how many servers, OS versions,
server requirements, dependencies, file system, directory structure. The answer
to whether to use a vendor solution like AWS Lamda, or ECS would lie here.&lt;&#x2F;p&gt;
&lt;p&gt;You probably need to do this once or at most 3 times &lt;strong&gt;ever&lt;&#x2F;strong&gt; unless you keep
changing core infrastructure. You could put this in an ansible script, ECS task
definitions, docker images, Amazon Machine Images, virtual machine
images et cetera.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tools: Packer, Terraform, Ansible, Kubernetes pods, ECS clusters.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;configuration-management&quot;&gt;Configuration management&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;i.giphy.com&#x2F;media&#x2F;3oz8xOOWHS2MYEJXXO&#x2F;giphy.gif&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Applications today are a collection of tools combined to solve a need.
In the example of a simple web application we have a database, an app, an app
server and a webserver. Configuration management is basically managing the glue
that binds these tools together; which commands to run, which services to start
and stop and when, arguments, environment variables, order of running them and
so forth.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tools: ansible vars&#x2F;vault, ansible plays&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;application-deployment&quot;&gt;Application deployment&lt;&#x2F;h3&gt;
&lt;p&gt;This is putting all the parts of the application that need to run on their
respective servers, starting them and making sure they&#x27;re all working together
and correctly.
In this case you have vendor tools such as Identity and Access Management from
AWS which you can build on top of.
This will mean having the following in an executable and version controllable
form: the deploy server, their user, deploy scripts avaible to them,
actual deploy commands to run and the order in which to run them.
You will only need to this during the first deployment or when something goes
terribly wrong and you have to rollback but even then it&#x27;s still going to be a
few commands or just one. You can also use other tools for deployment such as
bots.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tools: ansible, puppet, chef&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;continuous-integration&quot;&gt;Continuous integration&lt;&#x2F;h3&gt;
&lt;p&gt;This is running tests and building the application to catch errors either in the
code or the way parts of it integrate with each other.
Running tests, style checks and catching errors in the code.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tools: travis ci, circle ci, gitlab ci&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;continuous-deployment&quot;&gt;Continuous deployment&lt;&#x2F;h3&gt;
&lt;p&gt;Once the continuous integration tests run and pass, have a tool compile a binary
or create a commit, push it to a deploy environment and make sure it&#x27;s running.&lt;&#x2F;p&gt;
&lt;p&gt;This is comparable to continuous delivery which accordingo to Wikipedia:
&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Continuous_delivery&quot;&gt;&amp;quot;Continuous Delivery means that the team ensures every change can be deployed to production but may choose not to do it, usually due to business reasons&amp;quot;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Tools: travis-ecs-deploy, deploy scripts, terraformy&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt; &lt;&#x2F;p&gt;
&lt;p&gt; &lt;&#x2F;p&gt;
&lt;p&gt;In this post I&#x27;ve explained how the pipeline can be presented as code but only
as seperate components not how these components can be combined to work as one.&lt;&#x2F;p&gt;
&lt;p&gt;In the next post I&#x27;ll explain how you can use free tools and some open source
tools to create a code pipeline that runs from provisioning, configuration
management, version control, continuous integration and continuous deployment
requiring very little input from devops and with as little complexity as
possible.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>dm-crypt, luks, systemd-boot and UEFI on Archlinux</title>
		<published>2016-09-11T00:00:00+00:00</published>
		<updated>2016-09-11T00:00:00+00:00</updated>
		<link href="https://njagi.me/wiki/dm-crypt-systemd-boot-and-efi-on-archlinux/" type="text/html"/>
		<id>https://njagi.me/wiki/dm-crypt-systemd-boot-and-efi-on-archlinux/</id>
		<content type="html">&lt;p&gt;Here I provide a little help for setting up an archlinux system with full disk
encryption, efi and using systemd-boot as the boot loader. This is really just
what I learned from the &lt;a href=&quot;https:&#x2F;&#x2F;wiki.archlinux.org&#x2F;&quot;&gt;arch wiki&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;mattiaslundberg&#x2F;8620837&quot;&gt;Mattias Lundberg&#x27;s gist&lt;&#x2F;a&gt;
and &lt;a href=&quot;http:&#x2F;&#x2F;www.brandonkester.com&#x2F;tech&#x2F;2014&#x2F;03&#x2F;16&#x2F;full-disk-encryption-in-arch-linux-with-uefi.html&quot;&gt;Brandon Kester&#x27;s post&lt;&#x2F;a&gt;. I&#x27;ll assume you have installed arch before and
just need a little help getting everything up and running.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Desired setup:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;100M &#x2F;boot
&lt;&#x2F;span&gt;&lt;span&gt;100G &#x2F;root
&lt;&#x2F;span&gt;&lt;span&gt;8G swap
&lt;&#x2F;span&gt;&lt;span&gt;the rest for &#x2F;home
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Unlike &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mattiaslundberg&quot;&gt;Mattias Lundberg&lt;&#x2F;a&gt; I see no reason for separate &lt;code&gt;boot&lt;&#x2F;code&gt; and &lt;code&gt;efi&lt;&#x2F;code&gt;
patitions.&lt;&#x2F;em&gt; Although some people have a problem with having their &#x2F;boot in
fat32 due to permissions reasons.&lt;&#x2F;p&gt;
&lt;p&gt;This will be in 3 parts:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Partitioning, encrypting and repartitioning.&lt;&#x2F;li&gt;
&lt;li&gt;Installing the base system(arch).&lt;&#x2F;li&gt;
&lt;li&gt;Configuring the bootloader.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;partitioning-encrypting-and-repartitioning&quot;&gt;Partitioning, encrypting and repartitioning.&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# I like gdisk.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;gdisk&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;sdX
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# Clear everything
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; o
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# The first 100M efi partition
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; n -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ... -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; +100M -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ... -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; EF00
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# power through this by always pressing enter.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# default hex code is 8E00
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; n -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; ...  -&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;8&lt;&#x2F;span&gt;&lt;span&gt;E00
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Expected gdisk output should be 2 partitions, something along the lines of:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# In the end `p` in gdisk or `gdisk -l` should give you two partitions along the lines of:
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# Device      Start       End   Sectors   Size Type
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# &#x2F;dev&#x2F;sda1    2048    514047    512000   250M EFI System
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# &#x2F;dev&#x2F;sda2  514048 976773134 976259087 465.5G Linux filesystem
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;format-encrypt-repartition-and-format-respectively&quot;&gt;Format, encrypt, repartition and format respectively.&lt;&#x2F;h4&gt;
&lt;p&gt;The steps would be as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Format sdX1 in fat32&lt;&#x2F;li&gt;
&lt;li&gt;Encrypt sdX2
&lt;ul&gt;
&lt;li&gt;Decrypt and repartition&lt;&#x2F;li&gt;
&lt;li&gt;format the partitions in ext4&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# EFI only works with FAT32 so we format the 100M patition with FAT 32
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mkfs.vfat&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -F32&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;sdX1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# Let&amp;#39;s encrypt the other partition.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;cryptsetup&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -c&lt;&#x2F;span&gt;&lt;span&gt; aes-xts-plain64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -y --use-random&lt;&#x2F;span&gt;&lt;span&gt; luksFormat &#x2F;dev&#x2F;sdX2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# Let&amp;#39;s access our encrypted partition.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;cryptsetup&lt;&#x2F;span&gt;&lt;span&gt; luksOpen &#x2F;dev&#x2F;sdX2 luks
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# Now to create partitions inside the encrypted partition. &#x2F;root &#x2F;home and &#x2F;swap
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pvcreate&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;mapper&#x2F;luks
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;vgcreate&lt;&#x2F;span&gt;&lt;span&gt; vg0 &#x2F;dev&#x2F;mapper&#x2F;luks
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;lvcreate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; --size&lt;&#x2F;span&gt;&lt;span&gt; 8G vg0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; --name&lt;&#x2F;span&gt;&lt;span&gt; swap
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;lvcreate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; --size&lt;&#x2F;span&gt;&lt;span&gt; 100G vg0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; --name&lt;&#x2F;span&gt;&lt;span&gt; root
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;lvcreate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -l&lt;&#x2F;span&gt;&lt;span&gt; +100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;%&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;FREE&lt;&#x2F;span&gt;&lt;span&gt; vg0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; --name&lt;&#x2F;span&gt;&lt;span&gt; home
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# Your &#x2F;dev&#x2F;mapper should now have:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;#   &#x2F;dev&#x2F;mapper&#x2F;vg0-home
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;#   &#x2F;dev&#x2F;mapper&#x2F;vg0-root
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;#   &#x2F;dev&#x2F;mapper&#x2F;vg0-swap
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# Create file systems on the encrypted partitions.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# I don&amp;#39;t know much about file systems so I just go with ext4.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mkfs.ext4&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;mapper&#x2F;vg0-root
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mkfs.ext4&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;mapper&#x2F;vg0-home
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mkswap&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;mapper&#x2F;vg0-swap
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# Mount the partitions.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# Make sure to start with the root.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mount&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;mapper&#x2F;vg0-root &#x2F;mnt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;swapon&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;mapper&#x2F;vg0-swap    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# Not needed but a good thing to test
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;mnt&#x2F;boot
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mount&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;sdX1 &#x2F;mnt&#x2F;boot
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mkdir&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;mnt&#x2F;home
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mount&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;mapper&#x2F;vg0-home &#x2F;mnt&#x2F;home
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;install-arch&quot;&gt;Install arch&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# Install the base system
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pacstrap&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;mnt base base-devel
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;generate-fstab&quot;&gt;Generate fstab&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;genfstab&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -pU&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;mnt &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;mnt&#x2F;etc&#x2F;fstab
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# Make &#x2F;tmp a ramdisk (add the following line to &#x2F;mnt&#x2F;etc&#x2F;fstab)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;tmpfs&lt;&#x2F;span&gt;&lt;span&gt;	&#x2F;tmp	tmpfs	defaults,noatime,mode=1777	0	0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Verify that your fstab makes sense.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Change relatime on all non-boot partitions to noatime (reduces wear if using an SSD)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;For example:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# &#x2F;etc&#x2F;fstab: static file system information
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;#
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# &amp;lt;file system&amp;gt; &amp;lt;dir&amp;gt;   &amp;lt;type&amp;gt;  &amp;lt;options&amp;gt;       &amp;lt;dump&amp;gt;  &amp;lt;pass&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# &#x2F;dev&#x2F;mapper&#x2F;vg0-root
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;UUID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;9a180980-d2bf-40d6-a09a-7a95a378f5e3       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;               ext4            rw,relatime,data=ordered        0 1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# &#x2F;dev&#x2F;mapper&#x2F;vg0-home
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;UUID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;01e98383-e71a-4319-a70c-348783b1fc4c       &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;&#x2F;home&lt;&#x2F;span&gt;&lt;span&gt;           ext4            rw,relatime,data=ordered        0 2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# &#x2F;dev&#x2F;sda1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;UUID&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;F679-59DA          &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;&#x2F;boot&lt;&#x2F;span&gt;&lt;span&gt;           vfat            rw,relatime,fmask=0022,dmask=0022,codepage=437,iocharset=iso8859-1,shortname=mixed,errors=remount-ro    0 2
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# make &#x2F;tmp a ramdisk
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;tmpfs&lt;&#x2F;span&gt;&lt;span&gt;                   &#x2F;tmp            tmpfs           defaults,noatime,mode=1777                              0 0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;chroot&quot;&gt;chroot&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# chroot into the new system
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;arch-chroot&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;mnt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# Setup system clock
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;ln&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -s&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;share&#x2F;zoneinfo&#x2F;Africa&#x2F;Nairobi &#x2F;etc&#x2F;localtime
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;hwclock&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; --systohc --utc
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# Set the hostname
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;cool-comp-name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt; &amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;hostname
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# Update locale
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;echo&lt;&#x2F;span&gt;&lt;span&gt; LANG=en_US.UTF-8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;locale.conf
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# set password for root
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;passwd
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# add a sudo group because that&amp;#39;s cool
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;groupadd&lt;&#x2F;span&gt;&lt;span&gt; sudo
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# Add a user
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;useradd&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -m -g&lt;&#x2F;span&gt;&lt;span&gt; sudo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -s&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;bin&#x2F;zsh &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;passwd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# add your user to sudoers
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;visudo
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;mkinitcpio&quot;&gt;mkinitcpio&lt;&#x2F;h4&gt;
&lt;p&gt;Configure mkinitcpio with modules needed for the initrd image.&lt;&#x2F;p&gt;
&lt;p&gt;Add &#x27;ext4&#x27; to MODULES (or whatever fs you use)&lt;&#x2F;p&gt;
&lt;p&gt;Add &#x27;encrypt&#x27;, &#x27;lvm2&#x27; and &#x27;resume&#x27; to HOOKS before filesystems&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;MODULES&lt;&#x2F;code&gt; and &lt;code&gt;HOOKS&lt;&#x2F;code&gt; should be something along the following lines:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;less&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;mkinitcpio.con
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;MODULES&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;ext4&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;HOOKS&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;base udev autodetect modconf block keymap encrypt lvm2 resume filesystems keyboard fsck&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;configure-the-bootloader&quot;&gt;Configure the bootloader.&lt;&#x2F;h2&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# Given you mounted &#x2F;dev&#x2F;sdX1 on &#x2F;mnt&#x2F;boot
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;bootctl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; --path&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;boot install
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# Populate the systemd-boot configs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;blkid&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;dev&#x2F;sda2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;awk &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;{print $2}&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;sed &lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;s&#x2F;&amp;quot;&#x2F;&#x2F;g&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;gt;&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;boot&#x2F;loader&#x2F;entries&#x2F;arch.conf
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Edit the config generated above.
Use &lt;code&gt;allow-discards&lt;&#x2F;code&gt; when using an SSD&lt;&#x2F;p&gt;
&lt;p&gt;To quote &lt;a href=&quot;http:&#x2F;&#x2F;www.brandonkester.com&#x2F;tech&#x2F;2014&#x2F;03&#x2F;16&#x2F;full-disk-encryption-in-arch-linux-with-uefi.html&quot;&gt;Brandon Kester&#x27;s post&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;The resume= option will enable hibernation on the device.
The nice thing about having an encrypted swap partition is that your hibernation
data will be encrypted just like the rest of the at-rest data.
This makes hibernation a very secure alternative to leaving your
machine in stand-by mode, which is vulnerable to the cold boot attack.&amp;quot;&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Your &#x2F;boot&#x2F;loader&#x2F;entries&#x2F;arch.conf should be along the lines of:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;   Arch Linux
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;linux&lt;&#x2F;span&gt;&lt;span&gt;   &#x2F;vmlinuz-linux
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;initrd&lt;&#x2F;span&gt;&lt;span&gt;  &#x2F;initramfs-linux.img
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;options&lt;&#x2F;span&gt;&lt;span&gt; cryptdevice=UUID=53f48717-2f23-466d-aad8-ce513286af42:lvm:allow-discards resume=&#x2F;dev&#x2F;mapper&#x2F;vg0-swap root=&#x2F;dev&#x2F;mapper&#x2F;vg0-root home=&#x2F;dev&#x2F;mapper&#x2F;vg0-home rw quiet
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&#x2F;boot&#x2F;loader&#x2F;loader.conf should be along the lines of:
note default arch refers to the entries&#x2F;arch.conf from above
I like 0 timeout because speed &#x2F;boot&#x2F;loader&#x2F;loader.conf&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;timeout&lt;&#x2F;span&gt;&lt;span&gt; 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;default&lt;&#x2F;span&gt;&lt;span&gt; arch
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;editor&lt;&#x2F;span&gt;&lt;span&gt; 0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Finishing up.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# generate the ramdisk
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;mkinitcpio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt; -p&lt;&#x2F;span&gt;&lt;span&gt; linux
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# I hope your &#x2F;boot is sane.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# Mine is along the lines of:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span&gt; tree &#x2F;boot
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;&#x2F;boot
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; EFI
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   ├── BOOT
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   │   └── BOOTX64.EFI
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   └── systemd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;       └── systemd-bootx64.efi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; initramfs-linux-fallback.img
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; initramfs-linux.img
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;├──&lt;&#x2F;span&gt;&lt;span&gt; loader
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   ├── entries
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   │   └── arch.conf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;│&lt;&#x2F;span&gt;&lt;span&gt;   └── loader.conf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;└──&lt;&#x2F;span&gt;&lt;span&gt; vmlinuz-linux
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt; directories, 7 files
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# exit the chroot
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;exit
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# unmount the drives
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;umount&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;mnt&#x2F;home
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;umount&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;mnt&#x2F;boot
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;umount&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;mnt
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;# yaaay
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;reboot
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Packaging Python Projects</title>
		<published>2016-02-14T00:00:00+00:00</published>
		<updated>2016-02-14T00:00:00+00:00</updated>
		<link href="https://njagi.me/posts/packaging-python-projects/" type="text/html"/>
		<id>https://njagi.me/posts/packaging-python-projects/</id>
		<content type="html">&lt;p&gt;A while ago I had quite a problem figuring out how to package a python project.
This is because the python community has no set standard on how to
package python projects.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;So I decided to fix this for those who shall come after me
and wish to make something quick in python.
As an example project I came up with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;urbanslug&#x2F;Arithmetic&quot;&gt;Arithmetic&lt;&#x2F;a&gt;
and had to come up with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;urbanslug&#x2F;WaterInfrastructure&quot;&gt;WaterInfrastructure&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It is something close to a python project quickstart.&lt;br &#x2F;&gt;
Incidentally, it also happens to be an example of
&lt;strong&gt;functional programming in python&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The point is to show you how to structure:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;your tests (which testing framework might be good)&lt;&#x2F;li&gt;
&lt;li&gt;code&lt;&#x2F;li&gt;
&lt;li&gt;package it for distribution via a tool like pip or pypy and so forth&lt;&#x2F;li&gt;
&lt;li&gt;(all these in functional style)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;I use Python 3.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;arithmetic&quot;&gt;Arithmetic&lt;&#x2F;h3&gt;
&lt;p&gt;The directory structure for this is as follows:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;├── README.md
&lt;&#x2F;span&gt;&lt;span&gt;├── arithmetic
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── __init__.py
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── __main__.py
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── division
&lt;&#x2F;span&gt;&lt;span&gt;│   │   ├── __init__.py
&lt;&#x2F;span&gt;&lt;span&gt;│   │   ├── __main__.py
&lt;&#x2F;span&gt;&lt;span&gt;│   │   └── divide.py
&lt;&#x2F;span&gt;&lt;span&gt;│   ├── multiplication
&lt;&#x2F;span&gt;&lt;span&gt;│   │   ├── __init__.py
&lt;&#x2F;span&gt;&lt;span&gt;│   │   ├── __main__.py
&lt;&#x2F;span&gt;&lt;span&gt;│   │   └── multiply.py
&lt;&#x2F;span&gt;&lt;span&gt;│   └── tests
&lt;&#x2F;span&gt;&lt;span&gt;│       ├── __init__.py
&lt;&#x2F;span&gt;&lt;span&gt;│       ├── __main__.py
&lt;&#x2F;span&gt;&lt;span&gt;│       ├── division
&lt;&#x2F;span&gt;&lt;span&gt;│       │   └── test_divide.py
&lt;&#x2F;span&gt;&lt;span&gt;│       └── multiplication
&lt;&#x2F;span&gt;&lt;span&gt;│           └── test_multiply.py
&lt;&#x2F;span&gt;&lt;span&gt;└── setup.py
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;waterinfrastructure&quot;&gt;WaterInfrastructure&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;urbanslug&#x2F;WaterInfrastructure&quot;&gt;WaterInfrastructure&lt;&#x2F;a&gt; is the other project I wrote following the above guidelines.
This was as an interview question (this is a form of attribution :D).&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Question: I have a problem, do python projects have to have .pyc files in
the same directory as the source file?&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;There really isn&#x27;t much to say here you can learn more by browsing through
the code.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Emacs Cheatsheet</title>
		<published>2015-09-11T00:00:00+00:00</published>
		<updated>2015-09-11T00:00:00+00:00</updated>
		<link href="https://njagi.me/posts/emacs-cheatsheet/" type="text/html"/>
		<id>https://njagi.me/posts/emacs-cheatsheet/</id>
		<content type="html">&lt;p&gt;These bindings should work for emacs from 24 upwards.&lt;br &#x2F;&gt;
My emacs config is in my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;urbanslug&#x2F;dotfiles&#x2F;blob&#x2F;master&#x2F;.emacs&quot;&gt;dotfiles&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;center&quot;&gt;Key binding&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;Name&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;Purpose&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;Package&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;From emacs version&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-x SPC&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;(rectangle-mark-mode)&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Select a rectangular region.&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;None&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;24.4&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-c SPC&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;(ace-jump mode)&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Jump to a letter at start of a word.&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;ace-jump&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;unknown&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-s C-w&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;(write-file)&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Save current file as a different file&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;None&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;unknown&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-g C-&#x2F;&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Redo&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Redo something you&#x27;ve undone.&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;None&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;unknown&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-&#x2F;&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Undo&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Undo something you&#x27;ve done.&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;None&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;unknown&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-x k&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;(kill-buffer)&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Close the current buffer.&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;None&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;unknown&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-x C-f&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;(find-file)&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Visit a file&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;None&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;unknown&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-x C-v&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;(find-alternate-file)&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Visit a different file&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;None&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;unknown&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-x C-r&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;(find-file-read-only)&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Visit a file as read-only&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;None&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;unknown&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-x 4 f&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;(find-file-other-window)&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Visit a file in another window&#x2F;buffer&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;None&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;unknown&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-x 5 f&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;(find-file-other-frame)&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Visit a file in a new frame&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;None&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;unknown&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-a&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Jump to start of line&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Not emacs specific but IBM home&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;None&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;all&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-e&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Jump to end of line&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Not emacs specific but IBM end&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;None&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;all&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-s M-%&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Queried search and replace&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;None&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;all&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;handy-information&quot;&gt;Handy information&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;For redo keep repeating C-&#x2F; to keep redoing, C-g isn&#x27;t repeated.&lt;&#x2F;li&gt;
&lt;li&gt;If you “visit” a file that is actually a directory, Emacs invokes Dired, the Emacs directory browser. See &lt;a href=&quot;http:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;emacs&#x2F;manual&#x2F;html_node&#x2F;emacs&#x2F;Dired.html#Dired&quot;&gt;Dired&lt;&#x2F;a&gt;. You can disable this behavior by setting the variable find-file-run-dired to nil; in that case, it is an error to try to visit a directory.&lt;&#x2F;li&gt;
&lt;li&gt;When the emacs version is unknown it will most likely work for your version of emacs.&lt;&#x2F;li&gt;
&lt;li&gt;Here&#x27;s an awesome &lt;a href=&quot;http:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;emacs&#x2F;manual&#x2F;html_node&#x2F;emacs&#x2F;index.html#SEC_Content&quot;&gt;emacs manual&lt;&#x2F;a&gt; &lt;&#x2F;li&gt;
&lt;li&gt;Update emacs packages with M-x package-list-packages RET U x then follow the prompts as you wish.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;to-learn&quot;&gt;To learn&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;General indentation&lt;&#x2F;li&gt;
&lt;li&gt;Indenting blocks.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;handy-emacs-packages-i-like&quot;&gt;Handy emacs packages I like&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;ace-jump&lt;&#x2F;li&gt;
&lt;li&gt;auto-complete&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;extra&quot;&gt;Extra&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Updating emacs packages&lt;&#x2F;strong&gt;: &lt;code&gt;M-x package-list-packages U x&lt;&#x2F;code&gt; then follow the prompts&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;emacs-nox&lt;&#x2F;strong&gt;: In the arch repos there&#x27;s emacs-nox described as &amp;quot;The extensible, customizable, self-documenting real-time display editor, without X11 support&amp;quot; Good for SSH.&lt;&#x2F;li&gt;
&lt;li&gt;My &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;urbanslug&#x2F;dotfiles&#x2F;blob&#x2F;master&#x2F;.emacs&quot;&gt;emacs config&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Installing packages&lt;&#x2F;strong&gt;: &amp;quot;i&amp;quot; mark for install. &amp;quot;x&amp;quot; to install&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;M-x&lt;&#x2F;code&gt; to run any command. e.g &lt;code&gt;M-x erc&lt;&#x2F;code&gt; to IRC from emacs.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Imports and Exports as Documentation</title>
		<published>2015-08-22T00:00:00+00:00</published>
		<updated>2015-08-22T00:00:00+00:00</updated>
		<link href="https://njagi.me/posts/imports-and-exports-as-documentation/" type="text/html"/>
		<id>https://njagi.me/posts/imports-and-exports-as-documentation/</id>
		<content type="html">&lt;p&gt;Lately I&#x27;ve been reading huge haskell code bases quite a lot.
One thing that I have noted to be helpful when documentated
has been the imports section as well as the code having a list of the code it exports.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;I don&#x27;t know whether this is just a non-experienced programmer issue or it cuts across the board.&lt;&#x2F;p&gt;
&lt;p&gt;Documenting imports can happen:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;explicitly through:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;comments&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;implicity through:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;uniquely qualified imports.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;qualified as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;X
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;qualified as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Y
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;over&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;qualified as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;X
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;B &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;qualified as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;X
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;importing of specific instances (i.e using brackets to specify what one wants to import)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Basically anything that saves the programmer effort or time in:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Understanding what you&#x27;re importing&lt;&#x2F;li&gt;
&lt;li&gt;Why you&#x27;re importing it&lt;&#x2F;li&gt;
&lt;li&gt;See the usage of a function and quickly know where it&#x27;s from&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I can&#x27;t quantify or explain exactly how this helps me understand the code but it really does.
Especially when I can&#x27;t hoogle a function name
(the internet connections aren&#x27;t too fast in these parts).
It saves me the time of have to go through several modules trying to figure out where this import is from.&lt;&#x2F;p&gt;
&lt;p&gt;Most of time we are in just too much of a hurry to do this I understand.
I&#x27;m a victim of some terrible coding practices but I think it&#x27;s a good habit to adopt.&lt;&#x2F;p&gt;
&lt;p&gt;Well, the user can use tools like the repl to query where these imports are from
but again when you can save the user time and effort of querying for meta information please do so.
I know it&#x27;s not possible to do it all the time and everywhere but please do it when and where you can.&lt;&#x2F;p&gt;
&lt;p&gt;Let me illustrate this in some example code:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;{-|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;Module      : Devel.Build
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;Description : Attempts to compile the WAI application.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;Copyright   : (c)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;License     : GPL-3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;Maintainer  : njagi@urbanslug.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;Stability   : experimental
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;Portability : POSIX
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;compile compiles the app to give:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;Either a list of source errors or an ide-backend session.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; PackageImports, OverloadedStrings #-}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;module Devel.Compile &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;compile&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;where
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-- Almost everything is dependent on ide-backend.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;IdeSession
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-- From Cabal-ide-backend
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-- for parsing the cabal file and extracting lang extensions used.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Distribution.PackageDescription
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Distribution.PackageDescription.Parse
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Distribution.PackageDescription.Configuration
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Language.Haskell.Extension
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-- Used internally for showing errors.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Text &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;unpack&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-- Utility functions
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.Monoid &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;(&amp;lt;&amp;gt;)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System.Directory &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;createDirectoryIfMissing&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getCurrentDirectory&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-- Local imports
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Devel.Paths
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Devel.Types
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Compare with this which I wrote in a hurry.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;{-|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;Module      : Devel.Paths
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;Description : For filepath related matters.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;Copyright   : (c)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;License     : GPL-3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;Maintainer  : njagi@urbanslug.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;Stability   : experimental
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;Portability : POSIX
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;Uses the GHC package to parse .hi files.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;Will hopefully be moved upstream to ide-backend.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;-}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;{-# &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;LANGUAGE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt; OverloadedStrings #-}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;module Devel.Paths where
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System.Directory &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getCurrentDirectory&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;doesDirectoryExist&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;getDirectoryContents&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Monad &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forM&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Concurrent &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;forkIO&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System.FilePath.Glob
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System.FilePath &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;(&amp;lt;&#x2F;&amp;gt;)&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.List
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;IdeSession
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Devel.Modules
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System.FilePath.Posix &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;replaceExtension&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;dropExtension&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;takeExtensions&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import qualified &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Data.ByteString.Char&lt;&#x2F;span&gt;&lt;span&gt;8 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;C&lt;&#x2F;span&gt;&lt;span&gt;8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;Control.Monad.IO.Class
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System.FilePath &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;pathSeparator&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;System.Directory &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;removeFile&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As you can see one can learn quite a bit just from looking at the imports and module documentation alone.&lt;&#x2F;p&gt;
&lt;p&gt;The issue is that it sometimes takes a while for one to clean up their code like this
so it&#x27;s okay if your imports aren&#x27;t legible before refactoring.&lt;&#x2F;p&gt;
&lt;p&gt;Another thing, I don&#x27;t know if it&#x27;s just an emacs thing but I
can just to my imports and jump between sections of imports with f12.
This is both advantageous to both the one writing the code and the one reading it.&lt;br &#x2F;&gt;
The point of all of this is that well structured and well documented imports and exports are
a win for both the programmer and the one reading the code.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>wai-devel final submission</title>
		<published>2015-08-21T19:14:34+00:00</published>
		<updated>2015-08-21T19:14:34+00:00</updated>
		<link href="https://njagi.me/posts/wai-devel-final-submission/" type="text/html"/>
		<id>https://njagi.me/posts/wai-devel-final-submission/</id>
		<content type="html">&lt;p&gt;This is the final day of code submissions to Google for Google Summer of Code.
So it&#x27;s only fair that I give the community a report on the current state of affairs regarding wai-devel.&lt;br &#x2F;&gt;
This is more of a very detailed changelog than a blog post about wai-devel.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h2 id=&quot;what-wai-devel-expects-from-your-application&quot;&gt;What wai-devel expects from your application.&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;NOTHING&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
Yes, wai-devel expects nothing from your application.
However, your application shall receive a port number through the environment variable &lt;code&gt;PORT&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;UPDATE:&lt;&#x2F;em&gt;
Due to it&#x27;s reliance on ide-backend you also have to set the environment variable &lt;code&gt;GHC_PACKAGE_PATH&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;what-port-is-used-for&quot;&gt;What PORT is used for:&lt;&#x2F;h3&gt;
&lt;p&gt;Your application shall listen for connections on &lt;code&gt;localhost:&amp;lt;PORT&amp;gt;&lt;&#x2F;code&gt;
wai-devel by default creates a reverse proxy from port number 3000 to your application which is listening in on PORT.&lt;br &#x2F;&gt;
You can change the port from the default port 3000 by setting the environment variable PORT yourself.&lt;&#x2F;p&gt;
&lt;p&gt;wai-devel takes PORT and then cycles through various port numbers adding 1 to PORT to find a port that is free, sets that as the destination port and changes the PORT environment variable to that destination port. Therefore we can reverse proxy from PORT to a random port.&lt;&#x2F;p&gt;
&lt;p&gt;Reverse proxying is important for error reporting, future proofing and other ways of abstracting away the services wai-devel provides to your application.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;more-reliable-dirtiness-checking&quot;&gt;More reliable dirtiness checking.&lt;&#x2F;h2&gt;
&lt;p&gt;wai-devel will use the the module you have chosen to find the files to watch for changes in.
It watches the files it imports and their Template Haskell dependencies as well as the cabal file.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;compatibility-with-haskell-wai-applications&quot;&gt;Compatibility with Haskell wai-applications.&lt;&#x2F;h2&gt;
&lt;p&gt;wai-devel works with your usual yesod scaffold from yesod-bin out of the box and should work with other haskell wai apps as long as they use the PORT environment variable.&lt;&#x2F;p&gt;
&lt;p&gt;You can pass the filepath and function to run via command line arguments &lt;code&gt;--path&lt;&#x2F;code&gt; or &lt;code&gt;-p&lt;&#x2F;code&gt; and function &lt;code&gt;--function&lt;&#x2F;code&gt; or &lt;code&gt;-f&lt;&#x2F;code&gt;.
When these aren&#x27;t passed it assumes Application.develMain (borrowed from yesod).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yet-to-come&quot;&gt;Yet to come.&lt;&#x2F;h2&gt;
&lt;p&gt;I will be actively developing wai-devel well after Google Summer of Code is over (that is today).&lt;&#x2F;p&gt;
&lt;p&gt;The following are coming next:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Show build progress in the browser.&lt;&#x2F;li&gt;
&lt;li&gt;Provide a dashboard page with compilation status, garbage collection statistics, and other useful meta-information.&lt;&#x2F;li&gt;
&lt;li&gt;Port to Windows. (This depends on ide-backend getting ported to Windows.)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Google Summer of Code (2015)</title>
		<published>2015-07-19T00:00:00+00:00</published>
		<updated>2015-07-19T00:00:00+00:00</updated>
		<link href="https://njagi.me/posts/google-summer-of-code-2015/" type="text/html"/>
		<id>https://njagi.me/posts/google-summer-of-code-2015/</id>
		<content type="html">&lt;p&gt;This post is long overdue and I should&#x27;ve started writing on this a while ago but oh well I will write as much in the remaining time and try to make up for lost time.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;So I sent in a proposal for Google Summer of Code aimed at &lt;a href=&quot;https:&#x2F;&#x2F;www.haskell.org&quot;&gt;haskell.org&lt;&#x2F;a&gt;.
The aim of the proposal was &lt;strong&gt;To build an improved yesod-devel server&lt;&#x2F;strong&gt;. Let the name not fool you, this server is supposed to work with all &lt;a href=&quot;https:&#x2F;&#x2F;www.yesodweb.com&#x2F;book&#x2F;web-application-interface&quot;&gt;WAI&lt;&#x2F;a&gt; compliant haskell web applications such as yesod, spock, scotty applications among others.
My mentor has been &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;snoyberg&quot;&gt;Michael Snoyman&lt;&#x2F;a&gt;. I&#x27;ve also been working closely with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mgsloan&quot;&gt;Michael Sloan&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ncreep&quot;&gt;Daniel Beskin&lt;&#x2F;a&gt;.
It started on a high note. I was added to the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fpco&quot;&gt;FP Complete github organisation&lt;&#x2F;a&gt;. That had me very excited because of the kind of people who are in that organisation plus it&#x27;s &lt;strong&gt;THE HASKELL&lt;&#x2F;strong&gt; organisation in my opinion. So that&#x27;s the social aspect. Let&#x27;s talk programming.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;ide-backend&quot;&gt;ide-backend&lt;&#x2F;h1&gt;
&lt;p&gt;So FP Complete recently released a library that acts as a wrapper around the &lt;a href=&quot;https:&#x2F;&#x2F;wiki.haskell.org&#x2F;GHC&#x2F;As_a_library&quot;&gt;GHC API&lt;&#x2F;a&gt;, that is, &lt;a href=&quot;https:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;ide-backend-0.9.0.2&quot;&gt;ide-backend&lt;&#x2F;a&gt; (I wrote about it in an earlier post).
This library was extracted from the online FP Complete haskell ide. It was therefore still aimed at working  a cleint - server model where the client and server are on different boxes. The client (the package depending on ide-backend) had to explicitly specify the files to be copied from the cleint to the server. This worked in the FP Complete use case but wouldn&#x27;t work in our use case.&lt;&#x2F;p&gt;
&lt;p&gt;So we had to make it work in a local environment. This was my first task.&lt;&#x2F;p&gt;
&lt;p&gt;The aim here was to enable automatic source file (as well as data files and everything else) discovery by ide-backend so that it can submit these files for compilationa by GHC.&lt;br &#x2F;&gt;
To do this, one has to specify that they want to use ide-backend with a local working directory under &lt;code&gt;configLocalWorkingDir&lt;&#x2F;code&gt; in &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;ide-backend-0.9.0.2&#x2F;docs&#x2F;IdeSession.html#v:defaultSessionConfig&quot;&gt;&lt;code&gt;defaultSessionConfig&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;. &lt;code&gt;configLocalWorkingDir&lt;&#x2F;code&gt; is a value of type &lt;code&gt;Maybe FilePath&lt;&#x2F;code&gt;. It defaults to (Nothing :: Maybe FilePath) and has ide-backend working in a client-server environment. When &lt;code&gt;configLocalWorkingDir&lt;&#x2F;code&gt; is set it uses the given file path as the place it will look for source files, data files and everything in between.&lt;&#x2F;p&gt;
&lt;p&gt;Functionality for ide-backend to work in a non-server environment was finally merged in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;fpco&#x2F;ide-backend&#x2F;tree&#x2F;19561d9ff5f496d6556f38992bc8d08896d54091&quot;&gt;this commit onwards on github&lt;&#x2F;a&gt;. It&#x27;s not yet on the hackage version of ide-backend as of writing this post but it will be pushed soon enough.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;yesod-devel&quot;&gt;yesod-devel&lt;&#x2F;h1&gt;
&lt;p&gt;Then came the challenge of yesod-devel. This is the &amp;quot;client&amp;quot; in our case that depends on ide-backend. 
Quite honestly the fact is that ide-backend is the one doing most of the heavy lifting while yesod-devel coordinates everything.&lt;&#x2F;p&gt;
&lt;p&gt;The objectives of yesod-devel are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Automatic source and data file discovery.&lt;&#x2F;li&gt;
&lt;li&gt;Load code&lt;&#x2F;li&gt;
&lt;li&gt;Compile to bytecode&lt;&#x2F;li&gt;
&lt;li&gt;Run the code&lt;&#x2F;li&gt;
&lt;li&gt;Read environment variables&lt;&#x2F;li&gt;
&lt;li&gt;Grab compiler error messages and display them on the browser&lt;&#x2F;li&gt;
&lt;li&gt;Listening for changes in the current working directory&lt;&#x2F;li&gt;
&lt;li&gt;Automatic code reloading and recompilation&lt;&#x2F;li&gt;
&lt;li&gt;Perform reverse proxying for the web application&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>IdeSession</title>
		<published>2015-04-27T00:00:00+00:00</published>
		<updated>2015-04-27T00:00:00+00:00</updated>
		<link href="https://njagi.me/notes/notes-on-idesession/" type="text/html"/>
		<id>https://njagi.me/notes/notes-on-idesession/</id>
		<content type="html">&lt;p&gt;These are literally notes I wrote down while reading on ide-backend and I chose to turn into a blog post.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;&lt;h4 id=&quot;what-is-idesession&quot;&gt;What is IdeSession?&lt;&#x2F;h4&gt;
&lt;p&gt;This a module from the package &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;ide-backend-0.9.0.7&quot;&gt;ide-backend&lt;&#x2F;a&gt; from &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;business&#x2F;about&#x2F;about-us&#x2F;&quot;&gt;FP Complete&lt;&#x2F;a&gt; that provides an interface to ide-backend.
As far as I can tell it is the sole interface to ide-backend.&lt;br &#x2F;&gt;
I choose think of it as the sole API to ide-backend.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;what-is-ide-backend&quot;&gt;What is ide-backend?&lt;&#x2F;h4&gt;
&lt;p&gt;There&#x27;s a blog post from &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;business&#x2F;about&#x2F;about-us&#x2F;&quot;&gt;FP Complete&lt;&#x2F;a&gt; explaining what ide-backend is: &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2015&#x2F;03&#x2F;announce-ide-backend&quot;&gt;ide-backend blog post&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ll summarize in my own words.&lt;br &#x2F;&gt;
FP Complete have been creating an IDE for haskell and in this IDE they have code that they use for communication between the IDE and GHC (the most widely used haskell compiler).&lt;br &#x2F;&gt;
Duncan Coutts, Edsko de Vries, and Mikolaj Konarski implemented a library that would act as a wrapper around the GHC API from this this code.&lt;br &#x2F;&gt;
It&#x27;s this library (ide-backend) that is being used by people in the haskell community as general a wrapper around the GHC API.&lt;&#x2F;p&gt;
&lt;p&gt;Copied and pasted from the &lt;a href=&quot;https:&#x2F;&#x2F;www.fpcomplete.com&#x2F;blog&#x2F;2015&#x2F;03&#x2F;announce-ide-backend&quot;&gt;ide-backend blog post&lt;&#x2F;a&gt;. The functions of ide-backend are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Compiling code&lt;&#x2F;li&gt;
&lt;li&gt;Get compile error messages&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Submit&lt;&#x2F;strong&gt; updated code for recompilation&lt;&#x2F;li&gt;
&lt;li&gt;Extract type information&lt;&#x2F;li&gt;
&lt;li&gt;Find usage locations for identifiers &lt;em&gt;- works for both local and top level identifiers&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Run generated bytecode&lt;&#x2F;li&gt;
&lt;li&gt;Produce optimized executables&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;idesession&quot;&gt;IdeSession&lt;&#x2F;h2&gt;
&lt;p&gt;You may want to read &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;ide-backend-0.9.0.7&#x2F;docs&#x2F;IdeSession.html&quot;&gt;official IdeSession documentation&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;IdeSession is centered around:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A single threaded IDE session.&lt;&#x2F;li&gt;
&lt;li&gt;Operations for updating the session (changes in files, data, compiler parameters etc.)&lt;&#x2F;li&gt;
&lt;li&gt;Running querries given the current state of the session.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note that everything going on here is taking place in a single threaded environment.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h4 id=&quot;interaction-with-the-compiler&quot;&gt;Interaction with the compiler&lt;&#x2F;h4&gt;
&lt;p&gt;This interface is rather sequential; in part because we are dealing with files and data which are mutable.&lt;br &#x2F;&gt;
The general pattern of interation with the compiler is as follows:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;Update phase (update source files, data et cetera).&lt;&#x2F;li&gt;
&lt;li&gt;Compile phase&lt;&#x2F;li&gt;
&lt;li&gt;Query phase (query the compiler on matters regarding the code).&lt;&#x2F;li&gt;
&lt;li&gt;Run phase&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;&lt;strong&gt;Update phase&lt;&#x2F;strong&gt;: We don&#x27;t directly mutate the files since we don&#x27;t want to end up in a situation where ide-backend has a different state of files and data while our client has a different state of the files and data. However, we describle the changes we want to make to the files and let ide-backend effect them. That is, give ide-backend, via IdeSession, the new state of the files.&lt;br &#x2F;&gt;
&lt;strong&gt;Compile phase&lt;&#x2F;strong&gt;: We apply the relevant updates and invoke the compiler. It incrementally compiles some modules. This may take a while therefore we want progress information.&lt;br &#x2F;&gt;
&lt;strong&gt;Query phase&lt;&#x2F;strong&gt;: After compilation we collect info related to the compilation: source errors, list of successfully loaded modules et cetera.&lt;br &#x2F;&gt;
&lt;strong&gt;Run phase&lt;&#x2F;strong&gt;: Regardless of compilation results; we may want to run code from a certain module, interact with the code, interrupt its execution.&lt;&#x2F;p&gt;
&lt;p&gt;In haskell we follow types so naturally there are types associated with each of these phases.&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;IdeSession: &lt;em&gt;Query phase&lt;&#x2F;em&gt; - This is the default mode (we start here because at the start the files are in some state).&lt;&#x2F;li&gt;
&lt;li&gt;IdeSessionUpdate: &lt;em&gt;Update phase&lt;&#x2F;em&gt; - Accumulate updates.&lt;&#x2F;li&gt;
&lt;li&gt;Progress: &lt;em&gt;Compile phase&lt;&#x2F;em&gt; - Progress info.&lt;&#x2F;li&gt;
&lt;li&gt;RunActions: &lt;em&gt;Run phase&lt;&#x2F;em&gt; - For handles on the running code, through which one can interact with the code.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;additional-notes&quot;&gt;Additional notes.&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;Managing and mutating files in the source directory.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Trust the session. Trust IdeSession.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;In this environment we should coordinate updating and changing source files through IdeSession.&lt;br &#x2F;&gt;
Ide session manages files in the source directory. This is important because we don&#x27;t want the client and ide-backend have different versions of the files.&lt;br &#x2F;&gt;
All file changes and file reading must be done via the session (sequenced relative to other session state changes).&lt;br &#x2F;&gt;
The session will manage the files carefully including the case of exceptions and things going awry.
The caller needn&#x27;t duplicate file state.&lt;&#x2F;p&gt;
&lt;p&gt;The caller should be able to:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Put files into the session&lt;&#x2F;li&gt;
&lt;li&gt;Apply updates to files via the session&lt;&#x2F;li&gt;
&lt;li&gt;Extract files at any time before the session is closed.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Morally pure querries.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Purity:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The property of a function to always gives the same output given the same input.&lt;&#x2F;li&gt;
&lt;li&gt;The property of a function not to have side effects.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In this case we want to regard the compiler as a pure function disregarding the side effects part of purity because we have a lot of IO going on here.&lt;br &#x2F;&gt;
It should always be the case that we can throw away all the compilation results and recover them just from the file state and user parameters.&lt;br &#x2F;&gt;
&lt;em&gt;In case of warnings:&lt;&#x2F;em&gt; Traditionally compilers show warnings for the modules they compile skipping warning for modules they didn&#x27;t have to recompile. This however doesn&#x27;t match the pure function principle of same results for the same parameters. So IdeSession provides purity in cases such as these.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;So we try to maintain the compiler as:&lt;br &#x2F;&gt;
compiler (modules, args, env) -&amp;gt; (object code, compiler warnings, errors....)&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Persistent and transitory state.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The persistent state regards:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The source files&lt;&#x2F;li&gt;
&lt;li&gt;Data files&lt;&#x2F;li&gt;
&lt;li&gt;User supplied arguments for compilation.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Internally there is a lot of cached and transitory state. In memory or on disk; none of these persist in the case of a fatal error; for example, they are wiped before shutdown and only the source and data files persit in case of a power failure.&lt;&#x2F;p&gt;
&lt;p&gt;It should be possible to drop all transitory state and recover (somewhat) as long as the original session value is available. The &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;ide-backend-0.9.0.7&#x2F;docs&#x2F;IdeSession.html#v:restartSession&quot;&gt;&lt;code&gt;restartSession&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; function serves this purpose.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Emacs Setup for Haskell</title>
		<published>2015-04-13T00:00:00+00:00</published>
		<updated>2015-04-13T00:00:00+00:00</updated>
		<link href="https://njagi.me/posts/emacs-setup-for-haskell/" type="text/html"/>
		<id>https://njagi.me/posts/emacs-setup-for-haskell/</id>
		<content type="html">&lt;p&gt;This post assumes that you have a little experience with emacs and maybe some experience writing haskell.&lt;br &#x2F;&gt;
I assume that you&#x27;re using emacs and not xemacs or something else and therefore your init file is ~&#x2F;.emacs. You can also find your init file via &lt;code&gt;M-: RET (find-file user-init-file) RET&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;To set up emacs so that you can install packages add the following to your ~&#x2F;.emacs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;package)
&lt;&#x2F;span&gt;&lt;span&gt;(add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;package&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;archives
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;melpa&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; . &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;http:&#x2F;&#x2F;melpa.milkbox.net&#x2F;packages&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;(package&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;initialize)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I personally believe that melpa alone is enough.&lt;&#x2F;p&gt;
&lt;p&gt;Then to install packages:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;M-x RET package-install RET &amp;lt;package-name&amp;gt; RET RET
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Every time you make a save your ~&#x2F;.emacs file instead of restarting emacs to make sure everything is still okay, run&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;M-x eval-buffer RET
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To install haskell packages (I assume you already have cabal) use:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;$ cabal install &amp;lt;package-name&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s get started. Here&#x27;s a list of all the things that we&#x27;ll need.&lt;br &#x2F;&gt;
You can chose to install them all now or install them as we go on and as you see the need for them.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;haskell-packages-to-install&quot;&gt;Haskell packages to install&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;chrisdone&#x2F;structured-haskell-mode&quot;&gt;structured-haskell-mode&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;hasktags&quot;&gt;hasktags&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;emacs-packages-to-install&quot;&gt;Emacs packages to install&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.flycheck.org&#x2F;&quot;&gt;flycheck&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;chrisdone&#x2F;haskell-flycheck&quot;&gt;flycheck-haskell&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell&#x2F;haskell-mode&#x2F;wiki&quot;&gt;haskell-mode&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;www.emacswiki.org&#x2F;emacs&#x2F;RainbowDelimiters&quot;&gt;rainbow-delimiters&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;shm (the emacs package isn&#x27;t called structured-haskell-mode but shm)&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.emacswiki.org&#x2F;emacs&#x2F;AceJump&quot;&gt;ace-jump-mode&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.emacswiki.org&#x2F;emacs&#x2F;AutoComplete&quot;&gt;auto-complete-mode&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;setting-up-the-path-for-emacs&quot;&gt;Setting up the PATH for emacs.&lt;&#x2F;h2&gt;
&lt;p&gt;To have emacs point to where your haskell packages are installed add this to your ~&#x2F;.emacs:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;((my&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;path (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;expand&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;~&#x2F;.cabal&#x2F;bin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)))
&lt;&#x2F;span&gt;&lt;span&gt;  (setenv &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; (concat my&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;path &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; (getenv &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)))
&lt;&#x2F;span&gt;&lt;span&gt;  (add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;exec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;path my&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;path))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can replace &lt;code&gt;&amp;quot;~&#x2F;.cabal&#x2F;bin&amp;quot;&lt;&#x2F;code&gt; with a sandbox but I had issues with this when the sandbox cabal version didn&#x27;t keep up with the universal packages. So I would recommend you use the user-wide one ~&#x2F;.cabal&#x2F;bin.&lt;br &#x2F;&gt;
&lt;em&gt;Mind you, you can can use this to add anything to your emacs specific PATH.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;haskell-mode&quot;&gt;Haskell mode&lt;&#x2F;h2&gt;
&lt;p&gt;I hope you are already using haskell mode but if you aren&#x27;t it&#x27;s okay. This post is for you. This is going to be the major mode that you will be using. It would be wise to read the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell&#x2F;haskell-mode&#x2F;wiki&quot;&gt;haskell mode wiki&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Install haskell-mode from within emacs.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;M-x RET package-install RET haskell-mode RET RET
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To enable the minor mode which activates keybindings associated with interactive mode, add:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;interactive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process)
&lt;&#x2F;span&gt;&lt;span&gt;(add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;interactive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;Make sure to use haskell-interactive-mode as done above and not inferor haskell mode which has been deprecated.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To jump to the import list add this. &lt;em&gt;I prefer to bind this to f12.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt; [f12] &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;navigate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;imports)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To get import suggestions. For adding, removing or commenting out of imports and a process log use:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;(custom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;variables
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;(haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;suggest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;lines &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;(haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;loaded&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;modules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;(haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;log &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;General emacs haskell-mode bindings from the haskell-mode wiki:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c C-l&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;reload)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;interactive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;bring)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c C-t&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;type)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c C-i&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;info)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c C-c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;build)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c C-k&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;interactive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;clear)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;SPC&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;contextual&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;space)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;It will always prompt to begin a new project. Don&#x27;t fight it, just go with it. It won&#x27;t create any files.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Same as the ones above but are good to have in cabal-mode i.e when one is in the repl.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;interactive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;bring)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c C-k&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;interactive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;clear)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c C-c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;build)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Which GHCi process will we use in our repl? I prefer using cabal-repl instead of ghci because it loads one entire project automatically.
If you&#x27;re using a modern version of cabal I would go with cabal repl.&lt;br &#x2F;&gt;
To use cabal-repl as your GHCi process add the following:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;(custom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;variables
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;(haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;type &amp;#39;cabal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;repl))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;tags&quot;&gt;Tags&lt;&#x2F;h5&gt;
&lt;p&gt;You sometimes need to jump to the definition of a function that you are using in the same file. For this we have tags within haskell-mode. It however requires the haskell package hasktags so:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;$ cabal install hasktags
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To enable generation of tags when you save a file use:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;(custom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;variables
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;(haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;save &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To use both ghci and tags for jumping to a definition you can use the following. This way when GHCi fails because the code can&#x27;t compile it will fall back to tags.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;M-.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;jump&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;def&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;tag)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;This will be generating a file with the name TAGS within your projects. It&#x27;s a good idea to put this file in your .gitignore&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;To have what we see in our repl look good we could use, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell&#x2F;haskell-mode&#x2F;wiki&#x2F;Haskell-Interactive-Mode-REPL#printing-mode&quot;&gt;printing in the repl&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;setq&lt;&#x2F;span&gt;&lt;span&gt; haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;interactive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h5 id=&quot;debugging&quot;&gt;Debugging&lt;&#x2F;h5&gt;
&lt;p&gt;Check out how to use the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;haskell&#x2F;haskell-mode&#x2F;wiki&#x2F;Haskell-Interactive-Mode-Debugger&quot;&gt;debugger in haskell mode&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h5 id=&quot;autocompletion&quot;&gt;Autocompletion.&lt;&#x2F;h5&gt;
&lt;p&gt;Since ghc version 7.8 you can use the &lt;code&gt;TAB&lt;&#x2F;code&gt; key to auto complete suggestions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;flycheck-and-haskell-flycheck&quot;&gt;Flycheck and haskell-flycheck.&lt;&#x2F;h2&gt;
&lt;p&gt;These are gems my friend. GEMS I TELL YA!!&lt;&#x2F;p&gt;
&lt;p&gt;They compliment each other to compile your code in the background each time you save the file you are working on. If there is an error in your code the line with an error is underlined in red and in case of a warning it&#x27;s underlined in yellow. You get a pop up when you hover over the error with the mouse, the minibuffer also shows the error when the cursor is over the line in question. This means you don&#x27;t have to wait for compilation to fix those tiny errors.&lt;&#x2F;p&gt;
&lt;p&gt;Much to my surprise &lt;a href=&quot;http:&#x2F;&#x2F;www.flycheck.org&#x2F;&quot;&gt;flycheck&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;chrisdone&#x2F;haskell-flycheck&quot;&gt;haskell-flycheck&lt;&#x2F;a&gt; also give style suggestions as I assume HLint would top of error and warning checking.&lt;&#x2F;p&gt;
&lt;p&gt;I previously used ghc-mod for the purposes for which I am using flycheck now. I prefer flycheck because it does this for many more langauges.&lt;&#x2F;p&gt;
&lt;p&gt;To install
Install flycheck and haskell-flycheck from within emacs.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;M-x RET package-install RET flycheck flycheck-haskell RET RET
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To use flycheck add this to your .emacs&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;(add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;after&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#&amp;#39;global-flycheck-mode&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;after&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;flycheck
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;(add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;flycheck&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#&amp;#39;flycheck-haskell-setup&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;structured-haskell-mode-and-shm&quot;&gt;Structured Haskell Mode and shm&lt;&#x2F;h2&gt;
&lt;p&gt;The emacs package &lt;code&gt;shm&lt;&#x2F;code&gt; depends on the haskell package &lt;code&gt;structured-haskell-mode&lt;&#x2F;code&gt; so you have to install both.
{% highlight bash%}
$ cabal install structured-haskell-mode&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;```lisp
&lt;&#x2F;span&gt;&lt;span&gt;M-x RET package-install RET shm RET RET
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It&#x27;s the most impressive haskell in emacs &amp;quot;feature&amp;quot; for me. You should definitely read the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;chrisdone&#x2F;structured-haskell-mode#structured-haskell-mode&quot;&gt;structured haskell mode README&lt;&#x2F;a&gt; if you want to know how to use it well.&lt;&#x2F;p&gt;
&lt;p&gt;It helps you write in a clear and consistent style all through. It also helps with those little things that IDEs do and text editors don&#x27;t plus much more. You&#x27;ll understand what I mean after you use it.&lt;&#x2F;p&gt;
&lt;p&gt;To enable this I you should add the following to your init file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;(add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;structured&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key shm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c C-s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;shm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;If you try structured haskell mode and you don&#x27;t like it replace the above with:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;(add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;turn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;indentation)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;rainbow-delimiters&quot;&gt;Rainbow delimiters.&lt;&#x2F;h2&gt;
&lt;p&gt;I haven&#x27;t yet actually felt the value addition of this yet but it&#x27;s purpose it to show you brackets in different colours so that it&#x27;s simple to identify when you have an open bracket or something.&lt;&#x2F;p&gt;
&lt;p&gt;You can check it out in the &lt;a href=&quot;http:&#x2F;&#x2F;www.emacswiki.org&#x2F;emacs&#x2F;RainbowDelimiters&quot;&gt;rainbow delimiters wiki page&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s not very useful when I have structured haskell mode which automatically closes brackets. I&#x27;ll probably unistall it. You can however try it if you want.&lt;&#x2F;p&gt;
&lt;p&gt;Installing rainbow delimiters mode:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;M-x RET package-install RET rainbow-delimiters RET RET
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;For usage:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;rainbow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;delimiters)
&lt;&#x2F;span&gt;&lt;span&gt;(add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;prog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;rainbow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;delimiters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;auto-compelete-mode&quot;&gt;Auto-compelete mode&lt;&#x2F;h2&gt;
&lt;p&gt;This does just that. I&#x27;m not sure if there&#x27;s need for it or haskell-mode already does auto complete but I love it because I get autocomplete in other modes not just haskell mode.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;(package&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;initialize) (global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;complete&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode)
&lt;&#x2F;span&gt;&lt;span&gt;(add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;prog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;complete&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;; Added for all programming modes.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ace-jump-mode&quot;&gt;Ace jump mode.&lt;&#x2F;h2&gt;
&lt;p&gt;This also has nothing to do with haskell it&#x27;s just really handy and you can use it anywhere.
Use it to jump to a letter that is at the start of a word. It eliminates a whole lot of scrolling about.&lt;&#x2F;p&gt;
&lt;p&gt;Installing ace jump mode:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;M-x RET package-install RET ace-jump-mode RET RET
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;To use it, add the following to your init file:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span&gt;(add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;path &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;which-folder-ace-jump-mode-file-in&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;ace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;jump&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c SPC&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;ace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;jump&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;setq&lt;&#x2F;span&gt;&lt;span&gt; ace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;jump&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;gray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;background) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;; This line makes it work in black background coloured terminals.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;You can use ace-jump mode with other backgrounds not just grey, I use grey because it just worked great for me.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;stuff-that-i-think-would-be-fun-to-try-out&quot;&gt;Stuff that I think would be fun to try out:&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;present &lt;em&gt;(this failed to install due to ghc 7.10 dependency issues so I will update this post regarding it after I have used it.)&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;handy-keybindings-to-remember&quot;&gt;Handy keybindings to remember:&lt;&#x2F;h2&gt;
&lt;p&gt;There are many more of course but I really love these:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th align=&quot;center&quot;&gt;Key binding&lt;&#x2F;th&gt;&lt;th align=&quot;center&quot;&gt;Purpose&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-j&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Newline indent, also automatically adds a newline and comma when creating a list.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;M-^&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Delete indentation relative to parent. Opposite of C-j.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;M-a&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Jump to start of a parent&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;)&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Jump to end of a parent&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;M-r&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Raise the current node to replace its parent&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-c C-s&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Case split.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;M-;&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Wrap in multiline comment i.e   &lt;code&gt;{- &amp;lt;code&amp;gt;  -}&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-c C-q&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Works with C-j to add imports, this qualifies&#x2F;unqualifies them.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;M-k&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Kill&#x2F;paste node taking indentation to account.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-k&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Kill&#x2F;paste line taking indentation to account.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-y&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Yank&#x2F;copy take indentation into account&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C- `&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Start the REPL buffer. The project not loaded in it.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-c C-l&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Compile and load a Haskell module into your REPL.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-c C-c&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Compile the whole Cabal project.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-x `&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Jump to the next error, or you can move your cursor to an error in the REPL and hit &lt;code&gt;RET&lt;&#x2F;code&gt; to jump to it.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-c C-k&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Clear screen in REPL.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;F12&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Jump to import list.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-u C-c c&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;To run an arbitrary Cabal command.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-c c&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;To run some common Cabal commands.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-u C-c C-t&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;To print the type of the top-level identifier at point.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-c C-t&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;To print the type of the top-level identifier at point in the REPL and in the message buffer.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-c C-i&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;To print the info of the identifier at point in a buffer. Hit q to close.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;M-.&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Jump to definition or tag.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td align=&quot;center&quot;&gt;C-c SPC&lt;&#x2F;td&gt;&lt;td align=&quot;center&quot;&gt;Use ace jump mode.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h2 id=&quot;finally&quot;&gt;Finally&lt;&#x2F;h2&gt;
&lt;p&gt;All that init file code in one file that you can conveniently paste in your init file.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;lisp&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-lisp &quot;&gt;&lt;code class=&quot;language-lisp&quot; data-lang=&quot;lisp&quot;&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;; --------- Package lists
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;package)
&lt;&#x2F;span&gt;&lt;span&gt;(add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;package&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;archives
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;melpa&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; . &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;http:&#x2F;&#x2F;melpa.milkbox.net&#x2F;packages&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;(package&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;initialize)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;; --------- &amp;lt;&#x2F; Package lists
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;; ---------------- Haskell-mode
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span&gt;((my&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;path (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;expand&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;name &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;~&#x2F;.cabal&#x2F;bin&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)))
&lt;&#x2F;span&gt;&lt;span&gt;  (setenv &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; (concat my&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;path &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; (getenv &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)))
&lt;&#x2F;span&gt;&lt;span&gt;  (add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;exec&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;path my&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;path))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;interactive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process)
&lt;&#x2F;span&gt;&lt;span&gt;(add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;interactive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode)
&lt;&#x2F;span&gt;&lt;span&gt;  
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;; Makes editor focus on imports block in source file
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;; (eval-after-load &amp;#39;haskell-mode
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;;          &amp;#39;(define-key haskell-mode-map [f12] &amp;#39;haskell-navigate-imports))
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt; [f12] &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;navigate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;imports)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;;; For module import suggestions.
&lt;&#x2F;span&gt;&lt;span&gt;(custom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;variables
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;(haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;suggest&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;lines &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;(haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;import&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;loaded&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;modules &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;(haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;log &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;; Key bindings from the wiki
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c C-l&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;reload)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;interactive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;bring)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c C-t&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;type)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c C-i&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;do&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;info)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c C-c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;build)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c C-k&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;interactive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;clear)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;SPC&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;contextual&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;space)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;; The below commands pretty much match the ones above, but are handy to have in cabal-mode, too:
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-`&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;interactive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;bring)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c C-k&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;interactive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;clear)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c C-c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;build)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c c&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;cabal)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;; ghci process within emacs
&lt;&#x2F;span&gt;&lt;span&gt;(custom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;variables
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;(haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;type &amp;#39;cabal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;repl))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;; Hasktags
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;; customization variable to enable tags generation on save
&lt;&#x2F;span&gt;&lt;span&gt;(custom&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;variables
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;(haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;tags&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;save &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;M-.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;jump&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;def&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;tag)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;printing mode
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;setq&lt;&#x2F;span&gt;&lt;span&gt; haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;interactive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;; ---------------- &amp;lt;&#x2F; Haskell-mode
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;; --------------- flycheck
&lt;&#x2F;span&gt;&lt;span&gt;(add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;after&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;init&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#&amp;#39;global-flycheck-mode&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;eval&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;after&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;flycheck
&lt;&#x2F;span&gt;&lt;span&gt;  &amp;#39;(add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;flycheck&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#&amp;#39;flycheck-haskell-setup&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;; --------------- &amp;lt;&#x2F; flycheck
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;; -------------- structured haskell mode
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;shm)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;; use indentation from structured haskell mode
&lt;&#x2F;span&gt;&lt;span&gt;(add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;structured&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;haskell&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key shm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c C-s&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;shm&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;case&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;; -------------- structured haskell mode
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;; ------------------- Auto complete mode
&lt;&#x2F;span&gt;&lt;span&gt;(package&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;initialize) (global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;complete&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode)
&lt;&#x2F;span&gt;&lt;span&gt;(add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;prog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;auto&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;complete&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;; Added for all programming modes.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;; -------------------- &amp;lt;&#x2F; Auto complete mode
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;; -------------------- Ace jump
&lt;&#x2F;span&gt;&lt;span&gt;(add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;load&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;path &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;which-folder-ace-jump-mode-file-in&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;ace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;jump&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode)
&lt;&#x2F;span&gt;&lt;span&gt;(define&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;key global&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;map &lt;&#x2F;span&gt;&lt;span&gt;(kbd &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;C-c SPC&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;) &amp;#39;ace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;jump&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode)
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;setq&lt;&#x2F;span&gt;&lt;span&gt; ace&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;jump&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;gray&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;background) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;; Otherwise it will set background to same as emacs backgorund in terminal.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;; ---------------------- &amp;lt;&#x2F; ace jump
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;; --------- Rainbow delimiters
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;; show each level of parenthesis or braces in a different color.
&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;require&lt;&#x2F;span&gt;&lt;span&gt; &amp;#39;rainbow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;delimiters)
&lt;&#x2F;span&gt;&lt;span&gt;(add&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;prog&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;hook &amp;#39;rainbow&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;delimiters&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt;mode)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#586e75;&quot;&gt;;;--------- &amp;lt;&#x2F; Rainbow delimiters
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Using Emacs with Universal Environment Variables</title>
		<published>2015-04-02T00:00:00+00:00</published>
		<updated>2015-04-02T00:00:00+00:00</updated>
		<link href="https://njagi.me/posts/universal-environment-variables/" type="text/html"/>
		<id>https://njagi.me/posts/universal-environment-variables/</id>
		<content type="html">&lt;p&gt;We want to have environment variables that are accessible from within emacs and our shell as well as other REPLs (cabal repl or ghci if you&#x27;re writing haskell).&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Why would we want to use environment variables? It depends really, mainly if we want to pass info to our app&#x2F;code and we can&#x27;t put that in config files plus we are clever enough not to hardcode such things.&lt;&#x2F;p&gt;
&lt;p&gt;I run emacs from withing Xorg like most people do. The problem with this is that it couldn&#x27;t read the environment variables set in my &lt;code&gt;~&#x2F;.bashrc&lt;&#x2F;code&gt;, &lt;code&gt;~&#x2F;.zshrc&lt;&#x2F;code&gt; et cetera. So I needed to find a way to set these variables in a place where they could be accessible from other &amp;quot;places&amp;quot; and not just emacs. Something more &lt;em&gt;universal&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;There is a solution that involves setting environment variables that will be used &lt;strong&gt;WITHIN&lt;&#x2F;strong&gt; emacs in the ~&#x2F;.emacs file but that isn&#x27;t what I wanted. In case you want to read on it here&#x27;s the &lt;a href=&quot;http:&#x2F;&#x2F;ergoemacs.org&#x2F;emacs&#x2F;emacs_env_var_paths.html&quot;&gt;environment variables within link.&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;&#x2F;h2&gt;
&lt;p&gt;Short version: Add the environment variables to your &lt;code&gt;~&#x2F;.profile&lt;&#x2F;code&gt; or &lt;code&gt;&#x2F;etc&#x2F;profile&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Long version: Lo and behold this file &lt;code&gt;~&#x2F;.profile&lt;&#x2F;code&gt; or &lt;code&gt;&#x2F;etc&#x2F;profile&lt;&#x2F;code&gt;.&lt;br &#x2F;&gt;
You can set your environment variables there that will be loaded before X starts and that will be loaded even when you log in via SSH. You can then access these variables accross everything that runs in the terminal, from within xorg and so forth.&lt;&#x2F;p&gt;
&lt;p&gt;So the basic workflow is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;open or create ~&#x2F;.profile or &#x2F;etc&#x2F;profile depending on your purpose
&lt;&#x2F;span&gt;&lt;span&gt;add your environment variables.
&lt;&#x2F;span&gt;&lt;span&gt;Save the file.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I recommend that look at this &lt;a href=&quot;http:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;11005478&#x2F;how-to-access-a-bash-environment-variable-from-within-r-in-emacs-ess&quot;&gt;stack overflow question&lt;&#x2F;a&gt; which is where I drew my answer.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Scope in inheritance and composition in C++</title>
		<published>2014-12-08T00:00:00+00:00</published>
		<updated>2014-12-08T00:00:00+00:00</updated>
		<link href="https://njagi.me/wiki/scope-in-inheritance-and-composition-in-c/" type="text/html"/>
		<id>https://njagi.me/wiki/scope-in-inheritance-and-composition-in-c/</id>
		<content type="html">&lt;p&gt;I hope you read my previous post before looking at this one if you don&#x27;t know much about OOP in C++. The previous post explains various things like naming of stuff in C++ which is different from naming conventions in other languages.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;This one is about explaining scope in C++ when we have inheritance and non-default constructors as well as compositions.&lt;&#x2F;p&gt;
&lt;p&gt;The piont of this post is to establish:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;What order are constructors called in case we create an object of a derived class.&lt;&#x2F;li&gt;
&lt;li&gt;What order are destructors called in case we destroy an object of a derived class.&lt;&#x2F;li&gt;
&lt;li&gt;In the case of compositions (objects as data members) which constructors are called first. The one of the composing class or the object?&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;Anyway let&#x27;s get to it.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;#include &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;iostream&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;using namespace&lt;&#x2F;span&gt;&lt;span&gt; std;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;parent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Parent object created.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;~parent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Parent object destoyed.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;child&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public &lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;parent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Child object created.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;~child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Child object destoyed.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;composition &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;child&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; childObj;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;composition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Composing object created&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;    childObj &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt; child;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;~composition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;delete&lt;&#x2F;span&gt;&lt;span&gt; childObj;
&lt;&#x2F;span&gt;&lt;span&gt;    cout &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt; &lt;&#x2F;span&gt;&lt;span&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#2aa198;&quot;&gt;Composed oject destroyed.&lt;&#x2F;span&gt;&lt;span&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;&amp;lt;&amp;lt;&lt;&#x2F;span&gt;&lt;span&gt; endl;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#268bd2;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b58900;&quot;&gt;main &lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;  composition compObject;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#657b83;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Output:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;Composing object created
&lt;&#x2F;span&gt;&lt;span&gt;Parent object created.
&lt;&#x2F;span&gt;&lt;span&gt;Child object created.
&lt;&#x2F;span&gt;&lt;span&gt;Child object destoyed.
&lt;&#x2F;span&gt;&lt;span&gt;Parent object destoyed.
&lt;&#x2F;span&gt;&lt;span&gt;Composed oject destroyed.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;So what do we see here:&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;The composed object is created before the objects in it.&lt;&#x2F;li&gt;
&lt;li&gt;The parent class is created before the child class.&lt;&#x2F;li&gt;
&lt;li&gt;They are then destroyed in reverse order of their creation. Child then parent then composing.&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;It&#x27;s really that simple.&lt;&#x2F;p&gt;
&lt;p&gt;Hail Stallman and may the FOSS be with you.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Pulseaudio Mute on Boot</title>
		<published>2014-12-02T00:00:00+00:00</published>
		<updated>2014-12-02T00:00:00+00:00</updated>
		<link href="https://njagi.me/posts/pulseaudio-mute-on-boot/" type="text/html"/>
		<id>https://njagi.me/posts/pulseaudio-mute-on-boot/</id>
		<content type="html">&lt;p&gt;This might work for you or fail to. Doesn&#x27;t hurt to try.&lt;&#x2F;p&gt;
&lt;p&gt;I got this info at &lt;a href=&quot;http:&#x2F;&#x2F;www.pclinuxos.com&#x2F;forum&#x2F;index.php?topic=112440.0&quot;&gt;Pulseaudio original post&lt;&#x2F;a&gt; and just refined it.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Open &#x2F;usr&#x2F;share&#x2F;pulseaudio&#x2F;alsa-mixer&#x2F;paths&#x2F;analog-output.conf&lt;&#x2F;p&gt;
&lt;p&gt;Locate the following sections:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;[Element Speaker]
&lt;&#x2F;span&gt;&lt;span&gt;switch = mute
&lt;&#x2F;span&gt;&lt;span&gt;volume = off
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Element Desktop Speaker]
&lt;&#x2F;span&gt;&lt;span&gt;switch = mute
&lt;&#x2F;span&gt;&lt;span&gt;volume = off
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Change the &amp;quot;volume&amp;quot; value so that it reads:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#002b36;color:#839496;&quot;&gt;&lt;code&gt;&lt;span&gt;[Element Speaker]
&lt;&#x2F;span&gt;&lt;span&gt;switch = mute
&lt;&#x2F;span&gt;&lt;span&gt;volume = merge
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;[Element Desktop Speaker]
&lt;&#x2F;span&gt;&lt;span&gt;switch = mute
&lt;&#x2F;span&gt;&lt;span&gt;volume = merge
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I have noticed after installing rythmbox this issue has returned. I shall find a fix for it soon. Also music on rhythmbox is awesome. Gnome music looks good but it doesn&#x27;t work. Ever. I shall update with a fix for rhythmbox.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>The Man in the Arena</title>
		<published>2014-04-05T00:00:00+00:00</published>
		<updated>2014-04-05T00:00:00+00:00</updated>
		<link href="https://njagi.me/posts/man-in-the-arena/" type="text/html"/>
		<id>https://njagi.me/posts/man-in-the-arena/</id>
		<content type="html">&lt;p&gt;I was on you tube when I watched &lt;a href=&quot;https:&#x2F;&#x2F;www.youtube.com&#x2F;watch?v=8-JXOnFOXQk&quot;&gt;Brené Brown: Why Your Critics Aren&#x27;t The Ones Who Count&lt;&#x2F;a&gt;. You should watch it.
It&#x27;s all about not minding the haters.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;Citizenship in a Republic is the title of a speech given by former President of the United States, Theodore Roosevelt at the Sorbonne in Paris, France on April 23, 1910.
One notable passage on page seven of the 35-page speech is referred to as &amp;quot;The Man in the Arena&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;Read about it on wikipedia if you please &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Citizenship_in_a_Republic&quot;&gt;Citizenship in a Republic&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;Here is &amp;quot;The Man in the Arena&amp;quot;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;It is not the critic who counts; not the man who points out how the strong man stumbles, or where the doer of deeds could have done them better. The credit belongs to the man who is actually in the arena, whose face is marred by dust and sweat and blood; who strives valiantly; who errs, who comes short again and again, because there is no effort without error and shortcoming; but who does actually strive to do the deeds; who knows great enthusiasms, the great devotions; who spends himself in a worthy cause; who at the best knows in the end the triumph of high achievement, and who at the worst, if he fails, at least fails while daring greatly, so that his place shall never be with those cold and timid souls who neither know victory nor defeat.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>mail @ urbanslug</title>
		<published>2014-03-26T00:00:00+00:00</published>
		<updated>2014-03-26T00:00:00+00:00</updated>
		<link href="https://njagi.me/posts/mail-at-urbanslug/" type="text/html"/>
		<id>https://njagi.me/posts/mail-at-urbanslug/</id>
		<content type="html">&lt;p&gt;So uh since I am not allowed by society to wear a tinfoil hat and I believe that the we are under attack I have decided to leave gmail and set up my own mail server. Futile efforts but at least I shall have a fighting chance.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;FYI I heard not to wear a tinfoil hat because amplify the waves instead wear a wet towel on your head but you might get a cold or worse.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;hosting&quot;&gt;Hosting.&lt;&#x2F;h3&gt;
&lt;p&gt;I will get hosting from &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;computionist&quot;&gt;@computionist&lt;&#x2F;a&gt; on twitter. I don&#x27;t know him personally but I know him from #nothaskell on freenode and twitter. A great guy to say the least.&lt;&#x2F;p&gt;
&lt;p&gt;He is passionate about a ton of things.&lt;&#x2F;p&gt;
&lt;p&gt;He gave me &lt;strong&gt;free&lt;&#x2F;strong&gt; hosting.&lt;&#x2F;p&gt;
&lt;p&gt;He&#x27;s got free hosting for minorities, LGBT, newbies, &lt;a href=&quot;http:&#x2F;&#x2F;www.haskellnow.org&#x2F;CodeOfConduct&quot;&gt;haskell-now&lt;&#x2F;a&gt; members and #nothaskell members. I don&#x27;t know under which criteria I qualified but I thank him.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-stack&quot;&gt;The Stack.&lt;&#x2F;h3&gt;
&lt;p&gt;The plan was for a full FOSS stack and if possible GPL compatibilty and copyleft.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Operating System&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Linux
CentOS because systemd baybie :) and my redhat fanboyism.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Mail Server&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I decided to go with IMAP and SMTP because well it is the most flexible as far as I can tell.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;SMTP&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Simple_Mail_Transfer_Protocol&quot;&gt;SMTP&lt;&#x2F;a&gt; server I have decided to use will be &lt;strong&gt;&lt;a href=&quot;http:&#x2F;&#x2F;www.postfix.org&#x2F;&quot;&gt;Postfix&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;. I had issues with the choice because it is &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;IBM_Public_License&quot;&gt;IPL (IBM Public Licence)&lt;&#x2F;a&gt; . It&#x27;s &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Free_software&quot;&gt;free&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Copyleft&quot;&gt;copyleft&lt;&#x2F;a&gt; but not &lt;a href=&quot;http:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;GNU_General_Public_License&quot;&gt;GPL&lt;&#x2F;a&gt; compatible. A moral conundrum ey? Anyway it has a community around it and having read on it&#x27;s incompatibility with the GPL I decided to go with it. This is the cause iof incompatibility: &amp;quot;The IPL differs from the GPL in the handling of patents, as IPL terminates the license upon patent disputes.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;IMAP&lt;&#x2F;em&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Transport_Layer_Security&quot;&gt;IMAP&lt;&#x2F;a&gt; server I will use will be &lt;strong&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Cyrus_IMAP_server&quot;&gt;Cyrus&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;. This was a hard choice due to it&#x27;s &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;BSD_licenses#4-clause_license_.28original_.22BSD_License.22.29&quot;&gt;original BSD license&lt;&#x2F;a&gt;. I honestly don&#x27;t like anything BSD licensed let alone an older one with an advertising clause that I just learned about.&lt;&#x2F;p&gt;
&lt;p&gt;However I was consoled by this statement. &amp;quot;the Free Software Foundation, recommends developers not use the license, though it states there is no reason not to use software already using it.&amp;quot;&lt;&#x2F;p&gt;
&lt;p&gt;Worth noting that the choice in Cyrus and Postfix was mostly because &lt;a href=&quot;https:&#x2F;&#x2F;twitter.com&#x2F;computionist&quot;&gt;@computionist&lt;&#x2F;a&gt; already uses them and recommended them. I just wanted to make sure I was using FOSS and my choices were well documented plus had communities around them.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;security&quot;&gt;Security.&lt;&#x2F;h3&gt;
&lt;p&gt;Well I will be hosting in the USA so I have to try extra hard to make sure the NSA doesn&#x27;t listen in. The can break my encryption in 5 years after they have quantum computers strong enough. I don&#x27;t care.&lt;&#x2F;p&gt;
&lt;p&gt;What I know I want:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Ensure the server hardware and software are secure.&lt;&#x2F;li&gt;
&lt;li&gt;Reduce to a minimum and if possible eliminate any chances of mail being in plaintext whilst in the server.&lt;&#x2F;li&gt;
&lt;li&gt;TLS connection to the server.&lt;&#x2F;li&gt;
&lt;li&gt;Outgoing mail to be encrypted opportunistically i.e where the remote end supports it.&lt;&#x2F;li&gt;
&lt;li&gt;Hopefully encrypt mail while it is on the server.&lt;&#x2F;li&gt;
&lt;li&gt;Key pair per user and when they get a message, generate a random symmetric key and encrypt their email with it. Then encrypt that symmetric key to the users public key and store that with the encrypted message. This way even I can&#x27;t decrypt it. Only the user with the secret key can.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;How to achieve all this I am not yet sure since it might get tricky but not much worry since most of the time I, and any other users if there will be, will be using end to end encyption for my mail.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;visual-representation&quot;&gt;Visual Representation.&lt;&#x2F;h3&gt;
&lt;p&gt;Below is a high overview diagram of how a mail server works with the IMAP server routing local mail to the IMAP server and foward the rest to another SMTP server. This may change depending on one&#x27;s configuration of course. I left out the crypto bits.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Created with GIMP and my mad graphics skills lulz&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;Content&#x2F;Educate&#x2F;mail.png&quot; alt=&quot;mail image&quot; title=&quot;mail image overview&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>Solar Power in Africa</title>
		<published>2014-03-18T00:00:00+00:00</published>
		<updated>2014-03-18T00:00:00+00:00</updated>
		<link href="https://njagi.me/posts/solar-power-in-africa/" type="text/html"/>
		<id>https://njagi.me/posts/solar-power-in-africa/</id>
		<content type="html">&lt;p&gt;I have an opinion on a topic (renewable energy) I hardly understand but I wish the world would get right, who doesn&#x27;t?&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;I read a a wikipedia article that inspired this post: &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Solar_power_in_Africa#cite_note-2&quot;&gt;Solar power in Africa&lt;&#x2F;a&gt;.
It starts with: &lt;em&gt;Solar power in Africa has the potential to provide all of the world&#x27;s energy, by using only a &lt;b&gt;small&lt;&#x2F;b&gt; portion of the Sahara Desert.&lt;&#x2F;em&gt;
Note usage of the word &lt;strong&gt;small&lt;&#x2F;strong&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you read that wikipedia article and ignored the rest of this that would be okay.&lt;&#x2F;p&gt;
&lt;p&gt;This may sound loke a question a naive person would ask but why hasn&#x27;t Africa acted upon this in a major way? I wish African leaders would debate along these lines and actually do something about it.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;This post is about getting people to learn about Solar Power in Africa and talk about it.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Oil industry is big because it is an energy source, right? Compare this to knowing that we have a better renewable type of oil in our land but doing nothing about it. I do admit that the cost of the undertaking would be huge but that shouldn&#x27;t stop us. In fact I there is this line I read in the article:
Many African countries receive on average 325 days per year of bright sunlight. This gives solar power the potential to bring energy to virtually any location in Africa without the need for &lt;strong&gt;expensive&lt;&#x2F;strong&gt; large scale grid level infrastructural developments.&lt;&#x2F;p&gt;
&lt;p&gt;So we have even hours of daylight and darkness already working in our favour, right?&lt;&#x2F;p&gt;
&lt;p&gt;If Africa were able to control just it&#x27;s energy sources let alone the worlds it would have a ripple effect on the cost of products made in Africa not to mention the quality of life et al. Obviously energy is an untapped sector that could do Africa a lot of good the saddest part is knowing that I will probably die before it is exploited. I don&#x27;t know about you but to me clean energy is something &lt;strong&gt;humanity&lt;&#x2F;strong&gt; should aim at achieving.&lt;&#x2F;p&gt;
&lt;p&gt;The rest of the paragraph goes on to read: &lt;em&gt;The Desertec project is a proposal to provide 15% of Europe&#x27;s energy from the desert.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Moreover, a recent study indicates that a solar generating facility covering just 0.3% of the area comprising North Africa could supply all of the energy required by the European Union.&lt;&#x2F;p&gt;
&lt;p&gt;So Europe saw this and decided to act upon it. I sought figures on Europe&#x27;s power consumption to compare with Africa&#x27;s from wolfram alpha.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;    _Format_ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Result
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2010&lt;&#x2F;span&gt;&lt;span&gt; estimates&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;    kW h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;yr means (kilowatt hours per year)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Europe&lt;&#x2F;span&gt;&lt;span&gt; power consumption&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; `total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;3.409&lt;&#x2F;span&gt;&lt;span&gt; trillion kW h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;yr`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;% of &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Europe Power Consumption&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;511.3&lt;&#x2F;span&gt;&lt;span&gt; billion kW h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;yr`
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Africa&lt;&#x2F;span&gt;&lt;span&gt; power consumption&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; `total &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;559.6&lt;&#x2F;span&gt;&lt;span&gt; billion kW h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;yr`
&lt;&#x2F;span&gt;&lt;span&gt;    africa power consumption&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;% of&lt;&#x2F;span&gt;&lt;span&gt; europe power consumption)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span&gt; `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;1.071&lt;&#x2F;span&gt;&lt;span&gt; trillion kW h&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;yr`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok so let me get this right. We could&#x27;ve almost matched Africa&#x27;s power consumption by just doing what Europe did? This is obviously HUGE! albeit from a renewable and clean source. &lt;&#x2F;p&gt;
&lt;p&gt;So I have a line graph for this comparing:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; africa power consumption
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; europe power consumption
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;% of&lt;&#x2F;span&gt;&lt;span&gt; europe power consumption
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;-&lt;&#x2F;span&gt;&lt;span&gt; africa power consumption&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;+&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;15&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;% of&lt;&#x2F;span&gt;&lt;span&gt; europe power consumption)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;See it as a graph of where we are, where Europe is and where we would be if we gave minimal shit!&lt;&#x2F;p&gt;
&lt;p&gt;For a line graph see: &lt;a href=&quot;http:&#x2F;&#x2F;www.wolframalpha.com&#x2F;share&#x2F;clip?f=d41d8cd98f00b204e9800998ecf8427eli4fojnp9r&quot;&gt;line graph&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;&#x2F;images&#x2F;Content&#x2F;Graphs&#x2F;Comparison_of_Africa_Europe_power_consumption.png&quot; alt=&quot;graph image&quot; title=&quot;Solar power comparison bar graph&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;Note that 15% of Europes power consumption is just about on the same line as Africa&#x27;s power consumption so it&#x27;s hard to tell apart.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I couldn&#x27;t get an image of the graph because I haven&#x27;t written code to do so and also because I don&#x27;t have a wolfram alpha pro account. However if you&#x27;re reading this clicking on a link won&#x27;t hurt.&lt;&#x2F;p&gt;
&lt;p&gt;I know General Electric too has seen potential and invested in this but what have Africans done in this sector?&lt;&#x2F;p&gt;
&lt;p&gt;A few other interesting parts:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;50 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MW&lt;&#x2F;span&gt;&lt;span&gt; photovoltaic power plant is planned for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Garissa&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Kenya&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    which is expected to produce approximately &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;76&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;473 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MWh&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span&gt;year&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;155 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MW&lt;&#x2F;span&gt;&lt;span&gt; photovoltaic power plant is planned for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Ghana&lt;&#x2F;span&gt;&lt;span&gt;, 
&lt;&#x2F;span&gt;&lt;span&gt;    and is expected to be completed &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2015&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;A &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;75 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;MW&lt;&#x2F;span&gt;&lt;span&gt; solar power plant started production on &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;September&lt;&#x2F;span&gt;&lt;span&gt; 13th, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2013 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Kalkbult&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;South Africa&lt;&#x2F;span&gt;&lt;span&gt;&amp;#39;s &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Northern Cape&lt;&#x2F;span&gt;&lt;span&gt; (implemented by &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Scatec&lt;&#x2F;span&gt;&lt;span&gt;)&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;. 
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;It is obvious that something is being done along these lines and I am happy Kenya is involved but it is obviously not enough. I really feel that Kenya would&#x27;ve done better if it didn&#x27;t have it&#x27;s priorities in it&#x27;s anus and embraced a form of socialism.&lt;&#x2F;p&gt;
&lt;p&gt;We should not downplay the role solar power can play in energy as most would China and Germany which are the top two exporters in the world are doing a lot on solar power as well as other forms of renewable energy.&lt;&#x2F;p&gt;
&lt;p&gt;Another wikipedia article shows the continent&#x27;s potential with solar power &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Solar_power_by_country&quot;&gt;Solar power by country&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;It&#x27;s a shame that Africa&#x27;s subsection is only one paragraph instead of being broken down to info on solar power in individual african nations. To demonstrate just how short that paragraph is I shall paste it here.&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;haskell&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-haskell &quot;&gt;&lt;code class=&quot;language-haskell&quot; data-lang=&quot;haskell&quot;&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;On&lt;&#x2F;span&gt;&lt;span&gt; average, many &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;African&lt;&#x2F;span&gt;&lt;span&gt; countries receive up to &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;325&lt;&#x2F;span&gt;&lt;span&gt; days &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt; sunlight per year&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;This&lt;&#x2F;span&gt;&lt;span&gt; gives solar power the potential to bring energy to virtually any location 
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Africa&lt;&#x2F;span&gt;&lt;span&gt;  without the need for expensive large scale grid level
&lt;&#x2F;span&gt;&lt;span&gt;    infrastructural developments&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;The&lt;&#x2F;span&gt;&lt;span&gt; distribution &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt; solar resources across &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;Africa&lt;&#x2F;span&gt;&lt;span&gt; is fairly uniform, with more than
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;80&lt;&#x2F;span&gt;&lt;span&gt; percent &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt; the &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;African&lt;&#x2F;span&gt;&lt;span&gt; landscape receiving almost &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;2000&lt;&#x2F;span&gt;&lt;span&gt; kW·h per square meter 
&lt;&#x2F;span&gt;&lt;span&gt;    per year&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;A&lt;&#x2F;span&gt;&lt;span&gt; recent study indicates that a solar generating facility covering just &lt;&#x2F;span&gt;&lt;span style=&quot;color:#6c71c4;&quot;&gt;0.3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;% of
&lt;&#x2F;span&gt;&lt;span&gt;    the area comprising &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;North Africa&lt;&#x2F;span&gt;&lt;span&gt; could supply all &lt;&#x2F;span&gt;&lt;span style=&quot;color:#859900;&quot;&gt;of&lt;&#x2F;span&gt;&lt;span&gt; the energy required by 
&lt;&#x2F;span&gt;&lt;span&gt;    the &lt;&#x2F;span&gt;&lt;span style=&quot;color:#cb4b16;&quot;&gt;European Union
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I know this might be an issue of solar power developments not having been documented, but why? It is obviously just not a priority. We are good at documenting politics so we have the ability. &lt;&#x2F;p&gt;
&lt;p&gt;Another interesting article one &lt;strong&gt;should&lt;&#x2F;strong&gt; read on the same is &lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Renewable_energy_in_Africa&quot;&gt;Renewable energy in Africa&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I hope this convinces someone that Africa has the potential of being a leader in energy generation not just renewable energy and someone with the ability to do something about it will see it, actually give a fuck and do something about it.&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>How to Apply a Patch</title>
		<published>2014-03-05T00:00:00+00:00</published>
		<updated>2014-03-05T00:00:00+00:00</updated>
		<link href="https://njagi.me/posts/how-to-apply-a-patch-quickly/" type="text/html"/>
		<id>https://njagi.me/posts/how-to-apply-a-patch-quickly/</id>
		<content type="html">&lt;p&gt;So you really should read more on this but of you are in a hurry.&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;You should get your source then copy the .patch or .diff into the root of the source file. Then run &lt;code&gt;git apply patch_name&lt;&#x2F;code&gt;. If you don&#x27;t have git installed you can use the patch command. How to use it is in the first link below.&lt;&#x2F;p&gt;
&lt;p&gt;Other places you can read on the same including how to make one include:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;jungels.net&#x2F;articles&#x2F;diff-patch-ten-minutes.html&quot;&gt;The Ten Minute Guide to diff and patch&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;git-scm.com&#x2F;docs&#x2F;git-apply&quot;&gt;git apply&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;http:&#x2F;&#x2F;blog.linuxacademy.com&#x2F;linux&#x2F;introduction-using-diff-and-patch&#x2F;&quot;&gt;Introduction: Using diff and patch&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
	</entry>
	<entry xml:lang="en">
		<title>ThreadScope Patch</title>
		<published>2014-03-05T00:00:00+00:00</published>
		<updated>2014-03-05T00:00:00+00:00</updated>
		<link href="https://njagi.me/posts/threadscope-patch/" type="text/html"/>
		<id>https://njagi.me/posts/threadscope-patch/</id>
		<content type="html">&lt;p&gt;So I had some issues installing threadscope earlier.&lt;&#x2F;p&gt;
&lt;p&gt;After having installed the dependencies I had problems with building ThreadScope due to changes in ghc. The errors are right here: &lt;a href=&quot;https:&#x2F;&#x2F;gist.github.com&#x2F;urbanslug&#x2F;9365829&quot;&gt;gist to threadscope errors&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;span id=&quot;continue-reading&quot;&gt;&lt;&#x2F;span&gt;
&lt;p&gt;A few tips on haskell on archlinux: &lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;text&quot; style=&quot;background-color:#002b36;color:#839496;&quot; class=&quot;language-text &quot;&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&lt;span&gt;     Don&amp;#39;t use Pacman, AUR or another package manager to install anything other than:
&lt;&#x2F;span&gt;&lt;span&gt;     ghc and cabal.
&lt;&#x2F;span&gt;&lt;span&gt;     For everything else use cabal install i.e `cabal install package_name`
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Anyhoo the real matter here is that there was a problem with the source in ThreadScope.&lt;&#x2F;p&gt;
&lt;p&gt;The assumption is that you have all the dependencies met.
Get ThreadScope source files from: &lt;a href=&quot;http:&#x2F;&#x2F;hackage.haskell.org&#x2F;package&#x2F;threadscope&quot;&gt;ThreadScope source&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here is the patch: {% gist 9367418 threadscope.diff %}&lt;&#x2F;p&gt;
&lt;p&gt;If you have issues applying the patch read on it here: [How to apply a patch quickly.]({% post_url 2014-03-05-How-to-apply-a-patch-quickly %})&lt;&#x2F;p&gt;
&lt;p&gt;99% of it is really thanks to &lt;a href=&quot;http:&#x2F;&#x2F;trac.haskell.org&#x2F;ThreadScope&#x2F;ticket&#x2F;32&quot;&gt;source of diff&lt;&#x2F;a&gt; where you can see the patch was submitted by Bob Ippolito as an attachment.&lt;&#x2F;p&gt;
&lt;p&gt;The issue with the patch there is that it misses the tiny change GUI&#x2F;Main.hs &lt;&#x2F;p&gt;
</content>
	</entry>
</feed>
